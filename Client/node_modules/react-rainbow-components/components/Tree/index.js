"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Tree;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _treeChildren = _interopRequireDefault(require("./treeChildren"));

var _treeContainerUl = _interopRequireDefault(require("./styled/treeContainerUl"));

var _getNode = _interopRequireDefault(require("./helpers/getNode"));

/**
 * A Tree is visualization of a structure hierarchy with nested elements. A branch can be expanded or collapsed or selected. This is a BETA version.
 * @category Layout
 */
function Tree(props) {
  var data = props.data,
      onExpandCollapse = props.onExpandCollapse,
      onSelect = props.onSelect,
      className = props.className,
      style = props.style,
      id = props.id;
  return _react["default"].createElement(_treeContainerUl["default"], {
    className: className,
    style: style,
    id: id
  }, _react["default"].createElement(_treeChildren["default"], {
    data: data,
    onExpandCollapse: onExpandCollapse,
    onSelect: onSelect,
    nodePath: []
  }));
}

Tree.propTypes = {
  /** A array with the nodes of the Tree. This is a recursive shape that is used for render the nested nodes passed on children of the array.
   */
  data: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].node,
    icon: _propTypes["default"].node,
    isExpanded: _propTypes["default"].bool,
    isLoading: _propTypes["default"].bool,
    isChecked: _propTypes["default"].oneOf([true, false, 'indeterminate']),
    children: _propTypes["default"].array
  })),

  /** The action triggered when the user clicks in the tree node expand or collapse button. */
  onExpandCollapse: _propTypes["default"].func,

  /** The action triggered when the user clicks in the tree node checkbox. */
  onSelect: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
Tree.defaultProps = {
  data: [],
  onExpandCollapse: function onExpandCollapse() {},
  onSelect: function onSelect() {},
  className: undefined,
  style: undefined,
  id: undefined
};
/**
 * Add documentation.
 * @public
 */

Tree.getNode = _getNode["default"];