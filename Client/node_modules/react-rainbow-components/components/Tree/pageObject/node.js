"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * Node page object class.
 * @class
 */
var PageNodeItem =
/*#__PURE__*/
function () {
  /**
   * Create a new Node page object.
   * @constructor
   * @param {string} rootElement - The selector of the Node root element.
   */
  function PageNodeItem(rootElement) {
    (0, _classCallCheck2["default"])(this, PageNodeItem);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the button icon element.
   * @method
   */


  (0, _createClass2["default"])(PageNodeItem, [{
    key: "click",
    value: function click() {
      $(this.rootElement).$('[data-id="node-element"] > button').click();
    }
    /**
     * Returns true when the button icon has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocus",
    value: function hasFocus() {
      return $(this.rootElement).$('[data-id="node-element"] > button').isFocused();
    }
    /**
     * Returns true when the node is expanded, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isExpanded",
    value: function isExpanded() {
      return $(this.rootElement).$('[data-id="node-element-li"]').isDisplayed();
    }
    /**
     * Returns the label of the node.
     * @method
     * @returns {string}
     */

  }, {
    key: "getLabel",
    value: function getLabel() {
      return $(this.rootElement).$('[data-id="node-element"]').$('h1').getText();
    }
  }]);
  return PageNodeItem;
}();

module.exports = PageNodeItem;