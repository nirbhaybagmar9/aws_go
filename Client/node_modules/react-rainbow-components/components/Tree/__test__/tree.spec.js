"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var data = [{
  label: 'Tree Item',
  isChecked: false
}, {
  label: 'Tree Item',
  isChecked: false
}, {
  label: 'Tree Branch',
  isLoading: false,
  isExpanded: true,
  isChecked: false,
  children: [{
    label: 'Tree Item',
    isChecked: false
  }, {
    label: 'Tree Branch',
    isLoading: false,
    isExpanded: true,
    isChecked: false,
    children: [{
      label: 'Tree Item',
      isChecked: false
    }]
  }]
}, {
  label: 'Tree Branch',
  isExpanded: true,
  isChecked: false,
  children: [{
    label: 'Tree Item',
    isChecked: false
  }, {
    label: 'Tree Branch',
    isLoading: false,
    isExpanded: true,
    isChecked: false,
    children: [{
      label: 'Tree Item',
      isChecked: false
    }]
  }]
}];
describe('<Tree/>', function () {
  it('should call onExpandCollapse with the right parameters when the button is clicked', function () {
    var nodePath = [2, 1];
    var onExpandCollapsekMock = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      data: data,
      onExpandCollapse: onExpandCollapsekMock
    }));
    component.find('ButtonIcon').at(1).simulate('click');
    expect(onExpandCollapsekMock).toHaveBeenCalledWith({
      nodePath: nodePath
    });
  });
  it('should call onSelect with the right parameters when the node is selected', function () {
    var nodePath = [2];
    var onSelectMock = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      data: data,
      onSelect: onSelectMock
    }));
    component.find('PrimitiveCheckbox').at(2).find('input').simulate('change');
    expect(onSelectMock).toHaveBeenCalledWith({
      nodePath: nodePath
    });
  });
  it('should render the correct number of children', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      data: data
    }));
    expect(component.find('Child').length).toBe(10);
  });
});