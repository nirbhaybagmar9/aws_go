"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = require("./context");

var _container = _interopRequireDefault(require("./styled/container"));

var _indicatorList = _interopRequireDefault(require("./styled/indicatorList"));

var _indicatorBar = _interopRequireDefault(require("./styled/indicatorBar"));

/**
 * A progress indicator component communicates to the user the progress of a particular process.
 */
var ProgressIndicator =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(ProgressIndicator, _Component);

  function ProgressIndicator(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ProgressIndicator);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ProgressIndicator).call(this, props));
    _this.stepChildren = [];
    _this.registerStep = _this.registerStep.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setChildrenState = _this.setChildrenState.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(ProgressIndicator, [{
    key: "setChildrenState",
    value: function setChildrenState(step) {
      var currentStepName = this.props.currentStepName;
      var activeStepIndex = this.stepChildren.findIndex(function (item) {
        return item.name === currentStepName;
      });
      var currentChildIndex = this.stepChildren.findIndex(function (item) {
        return item.name === step.name;
      });

      if (currentChildIndex === activeStepIndex) {
        step.onSetStepState('Active');
      } else if (activeStepIndex === -1 || currentChildIndex < activeStepIndex) {
        step.onSetStepState('Completed');
      } else if (currentChildIndex > activeStepIndex) {
        step.onSetStepState('Inactive');
      }
    }
  }, {
    key: "registerStep",
    value: function registerStep(step) {
      var newChildrenRefs = this.stepChildren.concat([step]);
      this.stepChildren = newChildrenRefs;
      this.setChildrenState(step);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          className = _this$props.className,
          children = _this$props.children,
          currentStepName = _this$props.currentStepName,
          onClick = _this$props.onClick;
      var context = {
        currentStepName: currentStepName,
        privateRegisterStep: this.registerStep,
        privateOnClick: onClick,
        setChildrenState: this.setChildrenState
      };
      return _react["default"].createElement(_container["default"], {
        className: className,
        style: style
      }, _react["default"].createElement(_indicatorList["default"], null, _react["default"].createElement(_context.Provider, {
        value: context
      }, children)), _react["default"].createElement(_indicatorBar["default"], null));
    }
  }]);
  return ProgressIndicator;
}(_react.Component);

exports["default"] = ProgressIndicator;
ProgressIndicator.propTypes = {
  /** The current step, which must match the name prop of one of ProgressStep components. */
  currentStepName: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node
};
ProgressIndicator.defaultProps = {
  currentStepName: '',
  className: undefined,
  style: undefined,
  onClick: function onClick() {},
  children: null
};