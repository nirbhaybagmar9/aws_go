"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AccordionSection;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _RenderIf = _interopRequireDefault(require("./../RenderIf"));

var _utils = require("./../../libs/utils");

var _context = require("./../Accordion/context");

var _ButtonIcon = _interopRequireDefault(require("./../ButtonIcon"));

var _rightArrow = _interopRequireDefault(require("./rightArrow"));

var _isInArray = _interopRequireDefault(require("./isInArray"));

var _removeItemFromArray = _interopRequireDefault(require("./removeItemFromArray"));

var _li = _interopRequireDefault(require("./styled/li"));

var _summary = _interopRequireDefault(require("./styled/summary"));

var _heading = _interopRequireDefault(require("./styled/heading"));

var _icon = _interopRequireDefault(require("./styled/icon"));

var _content = _interopRequireDefault(require("./styled/content"));

/* eslint-disable react/prop-types */
var AccordionItem =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(AccordionItem, _Component);

  function AccordionItem(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, AccordionItem);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(AccordionItem).call(this, props));
    _this.accordionDetailsId = (0, _utils.uniqueId)('accordion-section-details');
    _this.name = (0, _utils.uniqueId)('accordion-section');
    _this.handleToggleSection = _this.handleToggleSection.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleFocusSection = _this.handleFocusSection.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.containerRef = _react["default"].createRef();
    _this.buttonRef = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(AccordionItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          privateRegisterAccordionSection = _this$props.privateRegisterAccordionSection,
          disabled = _this$props.disabled;

      if (!disabled) {
        return setTimeout(function () {
          return privateRegisterAccordionSection({
            name: _this2.getCurrentName(),
            ref: _this2.containerRef.current,
            focusButtonIcon: _this2.buttonRef.current.focus.bind(_this2)
          });
        }, 0);
      }

      return null;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var privateUnregisterAccordionSection = this.props.privateUnregisterAccordionSection;
      privateUnregisterAccordionSection(this.getCurrentName());
    }
  }, {
    key: "getCurrentName",
    value: function getCurrentName() {
      var name = this.props.name;
      return name || this.name;
    }
  }, {
    key: "resolveActiveNamesWhenMultiple",
    value: function resolveActiveNamesWhenMultiple() {
      var activeNames = this.props.activeNames;
      var nameToToggle = this.getCurrentName();

      if (activeNames === undefined) {
        return [nameToToggle];
      }

      if ((0, _isInArray["default"])(activeNames, nameToToggle)) {
        return (0, _removeItemFromArray["default"])(activeNames, nameToToggle);
      }

      return activeNames.concat([nameToToggle]);
    }
  }, {
    key: "resolveActiveNames",
    value: function resolveActiveNames() {
      var _this$props2 = this.props,
          multiple = _this$props2.multiple,
          activeNames = _this$props2.activeNames;
      var nameToToggle = this.getCurrentName();

      if (multiple) {
        return this.resolveActiveNamesWhenMultiple();
      }

      if (nameToToggle === activeNames) {
        return '';
      }

      return nameToToggle;
    }
  }, {
    key: "handleToggleSection",
    value: function handleToggleSection(event) {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          privateOnToggleSection = _this$props3.privateOnToggleSection;

      if (!disabled) {
        privateOnToggleSection(event, this.resolveActiveNames());
      }
    }
  }, {
    key: "handleFocusSection",
    value: function handleFocusSection() {
      var _this$props4 = this.props,
          disabled = _this$props4.disabled,
          privateOnFocusSection = _this$props4.privateOnFocusSection;

      if (!disabled) {
        privateOnFocusSection(this.getCurrentName());
      }
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      var _this$props5 = this.props,
          disabled = _this$props5.disabled,
          privateOnKeyPressed = _this$props5.privateOnKeyPressed;

      if (!disabled) {
        privateOnKeyPressed(event);
      }
    }
  }, {
    key: "isExpanded",
    value: function isExpanded() {
      var _this$props6 = this.props,
          activeNames = _this$props6.activeNames,
          multiple = _this$props6.multiple;
      var currentName = this.getCurrentName();

      if (multiple && Array.isArray(activeNames)) {
        return (0, _isInArray["default"])(activeNames, currentName);
      }

      return activeNames === currentName;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          style = _this$props7.style,
          disabled = _this$props7.disabled,
          children = _this$props7.children,
          label = _this$props7.label,
          icon = _this$props7.icon,
          assistiveText = _this$props7.assistiveText,
          className = _this$props7.className;
      var isExpanded = this.isExpanded();
      return _react["default"].createElement(_li["default"], {
        "data-id": "accordion-section-li",
        className: className,
        style: style,
        disabled: disabled,
        ref: this.containerRef
      }, _react["default"].createElement("section", null, _react["default"].createElement(_summary["default"], {
        "data-id": "accordion-section-summary"
      }, _react["default"].createElement(_heading["default"], {
        disabled: disabled
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!icon
      }, _react["default"].createElement(_icon["default"], null, icon)), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!label
      }, _react["default"].createElement("span", {
        title: "Accordion Label"
      }, label))), _react["default"].createElement(_ButtonIcon["default"], {
        size: "small",
        disabled: disabled,
        onClick: this.handleToggleSection,
        onFocus: this.handleFocusSection,
        onKeyDown: this.handleKeyPressed,
        assistiveText: assistiveText,
        ariaControls: this.accordionDetailsId,
        ariaExpanded: isExpanded,
        ref: this.buttonRef,
        icon: _react["default"].createElement(_rightArrow["default"], {
          isExpanded: isExpanded,
          disabled: disabled
        })
      })), _react["default"].createElement(_content["default"], {
        "data-id": "accordion-section-content",
        "aria-hidden": !isExpanded,
        isCollapsed: !isExpanded,
        id: this.accordionDetailsId
      }, children)));
    }
  }]);
  return AccordionItem;
}(_react.Component);
/**
 * An AccordionSection is single section that is nested in the Accordion component.
 * @category Layout
 */


function AccordionSection(props) {
  return _react["default"].createElement(_context.Consumer, null, function (context) {
    return _react["default"].createElement(AccordionItem, (0, _extends2["default"])({}, props, context));
  });
}

AccordionSection.propTypes = {
  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object,

  /** Specifies that the AccordionSection element should be disabled.
   * This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node,

  /** The text to be displayed as the AccordionSection's label. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The icon to show at the left of the label. */
  icon: _propTypes["default"].node,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** The name is used to determine which AccordionSection was clicked.
   * If `name` is not passed it will be generated. */
  name: _propTypes["default"].string
};
AccordionSection.defaultProps = {
  className: undefined,
  style: undefined,
  assistiveText: undefined,
  disabled: false,
  children: null,
  label: undefined,
  icon: null,
  name: undefined
};