"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _withReduxForm = _interopRequireDefault(require("./../../libs/hocs/withReduxForm"));

var _utils = require("../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _RequiredAsterisk = _interopRequireDefault(require("../RequiredAsterisk"));

var _checkboxList = _interopRequireDefault(require("./checkboxList"));

var _fieldset = _interopRequireDefault(require("./styled/fieldset"));

var _legend = _interopRequireDefault(require("./styled/legend"));

var _contentContainer = _interopRequireDefault(require("./styled/contentContainer"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

/**
 * A checkable input that communicates if an option is true, false or indeterminate.
 * @category Form
 */
var CheckboxGroup =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(CheckboxGroup, _Component);

  function CheckboxGroup(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CheckboxGroup);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(CheckboxGroup).call(this, props));
    _this.errorMessageId = (0, _utils.uniqueId)('error-message');
    _this.groupNameId = props.name || (0, _utils.uniqueId)('options');
    _this.handleOnChange = _this.handleOnChange.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(CheckboxGroup, [{
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var value = this.props.value;

      if (typeof value === 'string') {
        return [];
      }

      return value;
    }
  }, {
    key: "handleOnChange",
    value: function handleOnChange(event) {
      var _event$target = event.target,
          value = _event$target.value,
          checked = _event$target.checked;
      var _this$props = this.props,
          values = _this$props.value,
          onChange = _this$props.onChange;

      if (checked && Array.isArray(values)) {
        return onChange(values.concat([value]));
      }

      if (checked && !Array.isArray(values)) {
        return onChange([value]);
      }

      return onChange(values.filter(function (valueId) {
        return valueId !== value;
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          id = _this$props2.id,
          options = _this$props2.options,
          required = _this$props2.required,
          label = _this$props2.label,
          error = _this$props2.error,
          style = _this$props2.style,
          className = _this$props2.className;
      return _react["default"].createElement(_fieldset["default"], {
        id: id,
        className: className,
        style: style
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!label
      }, _react["default"].createElement(_legend["default"], null, _react["default"].createElement(_RequiredAsterisk["default"], {
        required: required
      }), label)), _react["default"].createElement(_contentContainer["default"], null, _react["default"].createElement(_checkboxList["default"], {
        values: this.getValue(),
        options: options,
        onChange: this.handleOnChange,
        name: this.groupNameId,
        describedBy: this.getErrorMessageId(),
        error: error
      })), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement(_errorText["default"], {
        id: this.getErrorMessageId()
      }, error)));
    }
  }]);
  return CheckboxGroup;
}(_react.Component);

CheckboxGroup.propTypes = {
  /** An Array of checkbox options with label, value and disabled for each checkbox. */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    value: _propTypes["default"].string,
    disabled: _propTypes["default"].bool
  })),

  /** Text label for the checkbox group. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The name of the checkbox group */
  name: _propTypes["default"].string,

  /** The list of selected checkboxes. Each array entry contains the value of a selected checkbox.
   * The value of each checkbox is set in the options attribute. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].string]),

  /** Set to true if at least one checkbox must be selected. This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that an input field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
CheckboxGroup.defaultProps = {
  options: [],
  value: [],
  label: null,
  name: undefined,
  onChange: function onChange() {},
  required: false,
  error: null,
  className: undefined,
  style: undefined,
  id: undefined
};

var _default = (0, _withReduxForm["default"])(CheckboxGroup);

exports["default"] = _default;