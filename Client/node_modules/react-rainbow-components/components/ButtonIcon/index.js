"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _AssistiveText = _interopRequireDefault(require("./../AssistiveText"));

var _button = _interopRequireDefault(require("./styled/button"));

/**
 * Buttons Icons provide the user with visual iconography that
 * is typically used to invoke an event or action.
 */
var ButtonIcon =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(ButtonIcon, _Component);

  function ButtonIcon(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ButtonIcon);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ButtonIcon).call(this, props));
    _this.buttonRef = _react["default"].createRef();
    return _this;
  }
  /**
   * Sets focus on the element.
   * @public
   */


  (0, _createClass2["default"])(ButtonIcon, [{
    key: "focus",
    value: function focus() {
      this.buttonRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.buttonRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.buttonRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          type = _this$props.type,
          disabled = _this$props.disabled,
          tabIndex = _this$props.tabIndex,
          onClick = _this$props.onClick,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          assistiveText = _this$props.assistiveText,
          ariaHaspopup = _this$props.ariaHaspopup,
          ariaPressed = _this$props.ariaPressed,
          style = _this$props.style,
          id = _this$props.id,
          ariaControls = _this$props.ariaControls,
          ariaExpanded = _this$props.ariaExpanded,
          icon = _this$props.icon,
          onKeyDown = _this$props.onKeyDown,
          form = _this$props.form,
          onMouseDown = _this$props.onMouseDown,
          className = _this$props.className,
          shaded = _this$props.shaded,
          variant = _this$props.variant,
          size = _this$props.size;
      return _react["default"].createElement(_button["default"], {
        onMouseDown: onMouseDown,
        "data-id": "button-icon-element",
        id: id,
        className: className,
        shaded: shaded,
        variant: variant,
        size: size,
        style: style,
        disabled: disabled,
        tabIndex: tabIndex,
        onFocus: onFocus,
        onBlur: onBlur,
        onClick: onClick,
        title: title,
        type: type,
        "aria-haspopup": ariaHaspopup,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-pressed": ariaPressed,
        onKeyDown: onKeyDown,
        form: form,
        ref: this.buttonRef
      }, icon, _react["default"].createElement(_AssistiveText["default"], {
        text: assistiveText
      }));
    }
  }]);
  return ButtonIcon;
}(_react.Component);

exports["default"] = ButtonIcon;
ButtonIcon.propTypes = {
  /** The icon to show if it is passed.
   * It must be a svg icon or a font icon. It is a required value. */
  icon: _propTypes["default"].node,

  /** The variant changes the appearance of the button. Accepted variants include
   * base, brand, success, destructive, neutral, outline-brand, border, border-filled, inverse and border-inverse.
   * This value defaults to base. */
  variant: _propTypes["default"].oneOf(['base', 'neutral', 'brand', 'outline-brand', 'destructive', 'success', 'border', 'border-filled', 'border-inverse', 'inverse']),

  /** The size of the buttonIcon. For the base variant, options include x-small, small, medium,
   * and large. For non-base variants, options include xx-small, x-small, small, and medium.
   * This value defaults to medium. */
  size: _propTypes["default"].oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),

  /** Specify true when the button has a shadow around it.
   * This value defaults to false.
   * Only border-filled, brand, and success variant can be shaded. */
  shaded: _propTypes["default"].bool,

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** Specifies the type of button. Valid values are button, reset, and submit.
   * This value defaults to button. */
  type: _propTypes["default"].oneOf(['button', 'submit', 'reset']),

  /** Specifies whether this button should be displayed in a disabled state.
   * Disabled buttons can't be clicked. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action that will be run when the button is clicked. */
  onClick: _propTypes["default"].func,

  /** The action that will be run when the user presses the mouse button. */
  onMouseDown: _propTypes["default"].func,

  /** The action triggered when a keyboard key is pressed. */
  onKeyDown: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** A space-separated list of element IDs that
   * this button controls the contents or presence of. */
  ariaControls: _propTypes["default"].string,

  /** Indicates whether an element the button controls is expanded or collapsed.
   * Valid values are 'true' or 'false'. */
  ariaExpanded: _propTypes["default"].bool,

  /** Indicates that the element has a popup context menu or sub-level menu. */
  ariaHaspopup: _propTypes["default"].bool,

  /** Indicates that the element has been pressed. */
  ariaPressed: _propTypes["default"].bool,

  /** It must be the id attribute of a form element that the button is associated with. */
  form: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
ButtonIcon.defaultProps = {
  icon: null,
  variant: 'base',
  size: 'medium',
  shaded: false,
  title: undefined,
  type: 'button',
  disabled: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onMouseDown: function onMouseDown() {},
  onKeyDown: function onKeyDown() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  assistiveText: undefined,
  ariaHaspopup: undefined,
  className: undefined,
  ariaPressed: undefined,
  style: undefined,
  id: undefined,
  ariaControls: undefined,
  ariaExpanded: undefined,
  form: undefined
};