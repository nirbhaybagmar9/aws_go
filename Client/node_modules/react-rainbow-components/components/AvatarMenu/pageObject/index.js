"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageMenuItem = require('../../MenuItem/pageObject');
/**
 * AvatarMenu page object class.
 * @class
 * @tutorial avatarMenu
 */


var PageButtonMenu =
/*#__PURE__*/
function () {
  /**
   * Create a new AvatarMenu page object.
   * @constructor
   * @param {string} rootElement - The selector of the AvatarMenu root element.
   */
  function PageButtonMenu(rootElement) {
    (0, _classCallCheck2["default"])(this, PageButtonMenu);
    this.rootElement = rootElement;
  }
  /**
   * Returns a new AvatarMenu page object of the element in item position.
   * @method
   * @param {number} itemPosition - The base 0 index of the MenuItem.
   */


  (0, _createClass2["default"])(PageButtonMenu, [{
    key: "getItem",
    value: function getItem(itemPosition) {
      var menuItems = $(this.rootElement).$$('li[role="menuitem"]');
      var buttonMenuItems = $(this.rootElement).$$('ul > *');

      if (menuItems[itemPosition]) {
        var indexPosition = buttonMenuItems.findIndex(function (element) {
          return element.ELEMENT === menuItems[itemPosition].ELEMENT;
        });
        return new PageMenuItem("".concat(this.rootElement, " li[role=\"menuitem\"]:nth-child(").concat(indexPosition + 1, ")"));
      }

      return null;
    }
    /**
     * Clicks the button element.
     * @method
     */

  }, {
    key: "click",
    value: function click() {
      $(this.rootElement).$('button[data-id="avatar-menu-button"]').click();
    }
    /**
     * Returns true when the menu is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return $(this.rootElement).$('div[data-id="primitive-menu_dropdown"]').isDisplayed();
    }
    /**
     * Returns true when the button element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusButton",
    value: function hasFocusButton() {
      return $(this.rootElement).$('button').isFocused();
    }
  }]);
  return PageButtonMenu;
}();

module.exports = PageButtonMenu;