"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = require("../index");

var _header = _interopRequireDefault(require("../styled/header"));

var _item = _interopRequireDefault(require("../styled/item"));

var _checkmark = _interopRequireDefault(require("../checkmark"));

describe('<Option />', function () {
  var optionRegisterFn;
  var optionUnregisterFn;
  var hoverFn;
  var clickFn;
  beforeEach(function () {
    optionRegisterFn = jest.spyOn(_index.OptionItem.prototype, 'register');
    optionUnregisterFn = jest.spyOn(_index.OptionItem.prototype, 'unregister');
    hoverFn = jest.fn();
    clickFn = jest.fn();
  });
  afterEach(function () {
    optionRegisterFn.mockClear();
    optionUnregisterFn.mockClear();
    hoverFn.mockClear();
    clickFn.mockClear();
  });
  it('should render a option header when variant is header', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      label: "Header 1",
      variant: "header"
    }));
    expect(component.find(_header["default"]).exists()).toBe(true);
  });
  it('should render a regular option when variant is default', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      label: "option 1",
      name: "option1"
    }));
    expect(component.find(_item["default"]).exists()).toBe(true);
  });
  it('should not register when is disabled', function () {
    (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      disabled: true
    }));
    expect(optionRegisterFn).not.toHaveBeenCalled();
  });
  it('should not register when is variant header', function () {
    (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      variant: "header"
    }));
    expect(optionRegisterFn).not.toHaveBeenCalled();
  });
  it('should not register when is name passed is not a string', function () {
    (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      name: {},
      currentValueName: "option1"
    }));
    expect(optionRegisterFn).not.toHaveBeenCalled();
  });
  it('should register when mount', function () {
    (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      name: "option1"
    }));
    expect(optionRegisterFn).toHaveBeenCalled();
  });
  it('should register when deselected', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      label: "Option 1",
      name: "option1",
      currentValueName: "option1"
    }));
    component.setProps({
      currentValueName: undefined
    });
    expect(optionRegisterFn).toHaveBeenCalled();
  });
  it('should unregister when unmount', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      label: "option 1",
      name: "option1"
    }));
    component.unmount();
    expect(optionUnregisterFn).toHaveBeenCalled();
  });
  it('should fire an event with the right data when click the option', function () {
    var data = {
      name: 'option1',
      label: 'option 1'
    };
    var component = (0, _enzyme.shallow)(_react["default"].createElement(_index.OptionItem, {
      label: "option 1",
      name: "option1",
      privateOnClick: clickFn
    }));
    component.find('li').simulate('mousedown');
    expect(clickFn).toHaveBeenCalledWith(undefined, data);
  });
  it('should not fire an event when click the option but is disabled', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      disabled: true,
      label: "option 1",
      name: "option1",
      privateOnClick: clickFn
    }));
    component.find('li').simulate('mousedown');
    expect(clickFn).not.toHaveBeenCalled();
  });
  it('should fire an event with the right data when hover the option', function () {
    var component = (0, _enzyme.shallow)(_react["default"].createElement(_index.OptionItem, {
      label: "option 1",
      name: "option1",
      privateOnHover: hoverFn
    }));
    component.find('li').simulate('mouseEnter');
    expect(hoverFn).toHaveBeenCalledWith(undefined, 'option1');
  });
  it('should not fire an event when hover the option but is disabled', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      disabled: true,
      label: "option 1",
      name: "option1",
      privateOnHover: hoverFn
    }));
    component.find('li').simulate('mouseEnter');
    expect(hoverFn).not.toHaveBeenCalled();
  });
  it('should render a checkmark icon when selected', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      name: "option1",
      currentValues: ['option1']
    }));
    expect(component.find(_checkmark["default"]).exists()).toBe(true);
  });
  it('should call privateUnregisterChild with the right parameters on unmount', function () {
    var privateUnregisterChildMockFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index.OptionItem, {
      name: "option1",
      currentValueName: "option1",
      privateUnregisterChild: privateUnregisterChildMockFn
    }));
    component.unmount();
    expect(privateUnregisterChildMockFn).toHaveBeenCalledTimes(1);
    expect(privateUnregisterChildMockFn.mock.calls[0][0]).not.toBeFalsy();
  });
});