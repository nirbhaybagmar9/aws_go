"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _withReduxForm = _interopRequireDefault(require("./../../libs/hocs/withReduxForm"));

var _utils = require("../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _context = require("./context");

var _styled = require("./styled");

var _RequiredAsterisk = _interopRequireDefault(require("../RequiredAsterisk"));

/**
 * ButtonGroupPicker can be used to group related options. The ButtonGroupPicker will control the selected state of its child ButtonOption.
 * @category Form
 */
var ButtonGroupPicker =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(ButtonGroupPicker, _Component);

  function ButtonGroupPicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ButtonGroupPicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ButtonGroupPicker).call(this, props));
    _this.groupNameId = _this.props.name || (0, _utils.uniqueId)('options');
    _this.errorMessageId = (0, _utils.uniqueId)('error-message');
    _this.handleOnChange = _this.handleOnChange.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(ButtonGroupPicker, [{
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
  }, {
    key: "getContext",
    value: function getContext() {
      var _this$props = this.props,
          multiple = _this$props.multiple,
          size = _this$props.size,
          value = _this$props.value;
      return {
        onChange: this.handleOnChange,
        values: value,
        type: multiple ? 'checkbox' : 'radio',
        name: this.groupNameId,
        ariaDescribedBy: this.getErrorMessageId(),
        size: size
      };
    }
  }, {
    key: "handleOnChange",
    value: function handleOnChange(event) {
      var _event$target = event.target,
          eventValue = _event$target.value,
          checked = _event$target.checked;
      var _this$props2 = this.props,
          value = _this$props2.value,
          multiple = _this$props2.multiple,
          onChange = _this$props2.onChange;

      if (!multiple) {
        return onChange(eventValue);
      }

      if (checked && Array.isArray(value)) {
        return onChange(value.concat([eventValue]));
      }

      if (checked && !Array.isArray(value)) {
        return onChange([eventValue]);
      }

      return onChange(value.filter(function (valueId) {
        return valueId !== eventValue;
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          id = _this$props3.id,
          className = _this$props3.className,
          style = _this$props3.style,
          label = _this$props3.label,
          children = _this$props3.children,
          error = _this$props3.error,
          bottomHelpText = _this$props3.bottomHelpText,
          required = _this$props3.required;
      var context = this.getContext();
      return _react["default"].createElement(_styled.StyledContainer, {
        id: id,
        className: className,
        style: style
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!label
      }, _react["default"].createElement(_styled.StyledLegend, null, _react["default"].createElement(_RequiredAsterisk["default"], {
        required: required
      }), label)), _react["default"].createElement(_styled.StyledButtonGroup, null, _react["default"].createElement(_context.Provider, {
        value: context
      }, children)), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!bottomHelpText
      }, _react["default"].createElement(_styled.StyledHelpText, null, bottomHelpText)), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement(_styled.StyledErrorText, {
        id: this.getErrorMessageId()
      }, error)));
    }
  }]);
  return ButtonGroupPicker;
}(_react.Component);

exports.Component = ButtonGroupPicker;
ButtonGroupPicker.propTypes = {
  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with a custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The title at the top of the component. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The name of the ButtonOption selected or if multiple an array of names. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array]),

  /** Set to true if at least one option must be selected. This value defaults to false. */
  required: _propTypes["default"].bool,

  /** It will fire when selected option(s) can change based on user interactions. */
  onChange: _propTypes["default"].func,

  /**
   * If true then multiple selections are allowed.
   * Defaults to false.
   */
  multiple: _propTypes["default"].bool,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** The name of the options inside the form. */
  name: _propTypes["default"].string,

  /**
   * The size of the ButtonOption.
   * Options includes x-small, small, medium and large.
   * This value defaults to medium.
   */
  size: _propTypes["default"].oneOf(['x-small', 'small', 'medium', 'large']),

  /** pecifies that a ButtonGroupPicker must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Shows the help message below the ButtonGroupPicker. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node])
};
ButtonGroupPicker.defaultProps = {
  className: undefined,
  style: undefined,
  id: undefined,
  label: undefined,
  value: undefined,
  required: false,
  onChange: function onChange() {},
  multiple: false,
  name: undefined,
  size: 'medium',
  error: undefined,
  bottomHelpText: undefined,
  children: undefined
};

var _default = (0, _withReduxForm["default"])(ButtonGroupPicker);

exports["default"] = _default;