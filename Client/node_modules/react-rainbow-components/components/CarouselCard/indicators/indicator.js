"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _AssistiveText = _interopRequireDefault(require("../../AssistiveText"));

var _indicatorLi = _interopRequireDefault(require("../styled/indicatorLi"));

var _indicatorButton = _interopRequireDefault(require("../styled/indicatorButton"));

/* eslint-disable no-script-url */
function getAssistiveText(header) {
  if (typeof header === 'string') {
    return "".concat(header, " Tab");
  }

  return undefined;
}

var Indicator =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Indicator, _Component);

  function Indicator(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Indicator);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Indicator).call(this, props));
    _this.indicatorRef = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(Indicator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          onCreate = _this$props.onCreate,
          indicatorID = _this$props.indicatorID;
      onCreate({
        indicatorID: indicatorID,
        ref: this.indicatorRef
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var onDestroy = this.props.onDestroy;
      onDestroy(this.indicatorRef);
    }
  }, {
    key: "getTabIndex",
    value: function getTabIndex(id) {
      if (this.isSelected(id)) {
        return 0;
      }

      return -1;
    }
  }, {
    key: "isSelected",
    value: function isSelected(id) {
      var selectedItem = this.props.selectedItem;
      return selectedItem === id;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          indicatorID = _this$props2.indicatorID,
          containerID = _this$props2.containerID,
          header = _this$props2.header,
          onSelect = _this$props2.onSelect;
      var assistiveText = getAssistiveText(header);
      var isSelected = this.isSelected(indicatorID);
      return _react["default"].createElement(_indicatorLi["default"], {
        role: "presentation",
        key: indicatorID
      }, _react["default"].createElement(_indicatorButton["default"], {
        id: indicatorID,
        isSelected: isSelected,
        role: "tab",
        tabIndex: this.getTabIndex(indicatorID),
        "aria-selected": isSelected,
        "aria-controls": containerID,
        title: assistiveText,
        onClick: function onClick() {
          return onSelect(indicatorID);
        },
        ref: this.indicatorRef
      }, _react["default"].createElement(_AssistiveText["default"], {
        text: assistiveText
      })));
    }
  }]);
  return Indicator;
}(_react.Component);

exports["default"] = Indicator;
Indicator.propTypes = {
  indicatorID: _propTypes["default"].string,
  containerID: _propTypes["default"].string,
  header: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  onSelect: _propTypes["default"].func,
  onCreate: _propTypes["default"].func,
  onDestroy: _propTypes["default"].func,
  selectedItem: _propTypes["default"].string
};
Indicator.defaultProps = {
  indicatorID: undefined,
  containerID: undefined,
  header: undefined,
  onSelect: function onSelect() {},
  onCreate: function onCreate() {},
  onDestroy: function onDestroy() {},
  selectedItem: undefined
};