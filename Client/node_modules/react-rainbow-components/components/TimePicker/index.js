"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clock = _interopRequireDefault(require("./icons/clock"));

var _pickerInput = _interopRequireDefault(require("../Input/pickerInput"));

var _timeSelect = _interopRequireDefault(require("./timeSelect"));

var _get12HourTime = _interopRequireDefault(require("./helpers/get12HourTime"));

var _getInputValue = _interopRequireDefault(require("./helpers/getInputValue"));

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

var _constants = require("../../libs/constants");

var _container = _interopRequireDefault(require("./styled/container"));

var _modal = _interopRequireDefault(require("./styled/modal"));

/**
 * A TimePicker is used to input a time by displaying an interface the user can interact with.
 * @category Form
 */
var TimePicker =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TimePicker, _Component);

  function TimePicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TimePicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TimePicker).call(this, props));
    _this.state = {
      isOpen: false,
      value: props.hour24 ? props.value : (0, _get12HourTime["default"])(props.value)
    };
    _this.inputRef = _react["default"].createRef();
    _this.timeSelectRef = _react["default"].createRef();
    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
    _this.closeModal = _this.closeModal.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setFocusToHourInput = _this.setFocusToHourInput.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(TimePicker, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var prevValue = _ref.value;
      var value = this.props.value;

      if (prevValue !== value) {
        this.updateValue();
      }
    }
  }, {
    key: "getTriggerInputValue",
    value: function getTriggerInputValue() {
      var value = this.state.value;
      var _this$props = this.props,
          placeholder = _this$props.placeholder,
          hour24 = _this$props.hour24;
      return (0, _getInputValue["default"])(value, placeholder, hour24);
    }
  }, {
    key: "setFocusToHourInput",
    value: function setFocusToHourInput() {
      this.timeSelectRef.current.focusHourInput();
    }
  }, {
    key: "updateValue",
    value: function updateValue() {
      var _this$props2 = this.props,
          value = _this$props2.value,
          hour24 = _this$props2.hour24;
      this.setState({
        value: hour24 ? value : (0, _get12HourTime["default"])(value)
      });
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var keyCode = event.keyCode;
      var readOnly = this.props.readOnly;
      var shouldOpenModal = (keyCode === _constants.ENTER_KEY || keyCode === _constants.SPACE_KEY) && !readOnly;

      if (shouldOpenModal) {
        this.setState({
          isOpen: true
        });
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var _this$props3 = this.props,
          onClick = _this$props3.onClick,
          readOnly = _this$props3.readOnly;

      if (!readOnly) {
        this.setState({
          isOpen: true
        });
        onClick(event);
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      var _this$props4 = this.props,
          onBlur = _this$props4.onBlur,
          value = _this$props4.value;
      onBlur(value);
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      var _this$props5 = this.props,
          onFocus = _this$props5.onFocus,
          value = _this$props5.value;
      onFocus(value);
    }
  }, {
    key: "closeModal",
    value: function closeModal() {
      this.setState({
        isOpen: false
      });
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.inputRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.inputRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.inputRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          placeholder = _this$props6.placeholder,
          label = _this$props6.label,
          required = _this$props6.required,
          style = _this$props6.style,
          className = _this$props6.className,
          hideLabel = _this$props6.hideLabel,
          name = _this$props6.name,
          bottomHelpText = _this$props6.bottomHelpText,
          isCentered = _this$props6.isCentered,
          error = _this$props6.error,
          readOnly = _this$props6.readOnly,
          disabled = _this$props6.disabled,
          tabIndex = _this$props6.tabIndex,
          id = _this$props6.id,
          cancelLabel = _this$props6.cancelLabel,
          okLabel = _this$props6.okLabel,
          onChange = _this$props6.onChange,
          hour24 = _this$props6.hour24;
      var _this$state = this.state,
          isOpen = _this$state.isOpen,
          value = _this$state.value;
      return _react["default"].createElement(_container["default"], {
        id: id,
        className: className,
        style: style
      }, _react["default"].createElement(_pickerInput["default"], {
        id: "time-picker_time-input",
        ref: this.inputRef,
        label: label,
        placeholder: placeholder,
        icon: _react["default"].createElement(_clock["default"], null),
        iconPosition: "right",
        required: required,
        value: this.getTriggerInputValue(),
        onKeyDown: this.handleKeyDown,
        onClick: this.handleClick,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        hideLabel: hideLabel,
        name: name,
        bottomHelpText: bottomHelpText,
        isCentered: isCentered,
        error: error,
        readOnly: readOnly,
        disabled: disabled,
        tabIndex: tabIndex
      }), _react["default"].createElement(_modal["default"], {
        id: "time-picker_modal",
        isOpen: isOpen,
        onRequestClose: this.closeModal,
        onOpened: this.setFocusToHourInput
      }, _react["default"].createElement(_timeSelect["default"], {
        onCloseModal: this.closeModal,
        onChange: onChange,
        cancelLabel: cancelLabel,
        okLabel: okLabel,
        value: value,
        ref: this.timeSelectRef,
        hour24: hour24
      })));
    }
  }]);
  return TimePicker;
}(_react.Component);

TimePicker.propTypes = {
  /** Sets the date for the TimePicker programmatically. */
  value: _propTypes["default"].string,

  /** Override the label of the 'Cancel' button. */
  cancelLabel: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Override the label of the 'OK' button. */
  okLabel: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** Text that is displayed when the TimePicker is empty,
   * to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** Text label for the TimePicker. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** A boolean to hide the TimePicker label. */
  hideLabel: _propTypes["default"].bool,

  /** Specifies that the TimePicker must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** The name of the TimePicker. */
  name: _propTypes["default"].string,

  /** Shows the help message below the TimePicker. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the TimePicker text will be centered. This value defaults to false. */
  isCentered: _propTypes["default"].bool,

  /** Specifies that the TimePicker must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the TimePicker is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** Specifies that the TimePicker element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** Specifies that the TimePicker will be in a 24hr format. This value defaults to false. */
  hour24: _propTypes["default"].bool
};
TimePicker.defaultProps = {
  value: undefined,
  cancelLabel: 'Cancel',
  okLabel: 'OK',
  onChange: function onChange() {},
  placeholder: null,
  label: undefined,
  hideLabel: false,
  required: false,
  name: undefined,
  bottomHelpText: null,
  isCentered: false,
  error: null,
  readOnly: false,
  disabled: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  id: undefined,
  className: undefined,
  style: undefined,
  hour24: false
};

var _default = (0, _withReduxForm["default"])(TimePicker);

exports["default"] = _default;