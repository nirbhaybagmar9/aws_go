"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _inputItems = _interopRequireDefault(require("./inputItems"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _RequiredAsterisk = _interopRequireDefault(require("../RequiredAsterisk"));

var _hooks = require("../../libs/hooks");

var _hooks2 = require("./hooks");

var _helpers = require("./helpers");

var _styled = require("./styled");

/**
 * The CodeInput is an element that allows to fill a list of numbers, suitable for code validations.
 * @category Form
 */
var CodeInput = _react["default"].forwardRef(function (props, ref) {
  var _useReduxForm = (0, _hooks.useReduxForm)(props),
      id = _useReduxForm.id,
      valueProp = _useReduxForm.value,
      label = _useReduxForm.label,
      bottomHelpText = _useReduxForm.bottomHelpText,
      length = _useReduxForm.length,
      disabled = _useReduxForm.disabled,
      required = _useReduxForm.required,
      readOnly = _useReduxForm.readOnly,
      error = _useReduxForm.error,
      tabIndex = _useReduxForm.tabIndex,
      onClick = _useReduxForm.onClick,
      onChange = _useReduxForm.onChange,
      onFocus = _useReduxForm.onFocus,
      onBlur = _useReduxForm.onBlur,
      onKeyDown = _useReduxForm.onKeyDown,
      className = _useReduxForm.className,
      style = _useReduxForm.style;

  var inputRef = (0, _react.useRef)();
  var value = (0, _hooks2.useValueState)(valueProp, length);
  var focusedIndex = (0, _hooks2.useFocusedIndexState)(value, length, disabled, readOnly);
  var previousFocusedIndex = (0, _hooks2.usePreviousIndex)(focusedIndex);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      focus: function focus() {
        inputRef.current.focus();
      },
      click: function click() {
        inputRef.current.click();
      },
      blur: function blur() {
        inputRef.current.blur();
      }
    };
  });
  (0, _react.useEffect)(function () {
    if (previousFocusedIndex !== undefined) {
      (0, _helpers.setFocus)(inputRef);
    }
  }, [inputRef, focusedIndex, previousFocusedIndex]);

  var handleOnChange = function handleOnChange(inputValue, index) {
    var newValue = (0, _helpers.getNormalizedValue)(inputValue, index, value);
    var hasValueChanged = newValue !== valueProp;

    if (hasValueChanged) {
      onChange(newValue);
    }
  };

  var handleOnFocus = function handleOnFocus(e, index) {
    if (focusedIndex !== index) {
      (0, _helpers.setFocus)(inputRef);
    }

    onFocus(e);
  };

  var handleOnPaste = function handleOnPaste(e) {
    onChange((0, _helpers.getNumbersFromClipboard)(e.clipboardData.getData('Text')));
  };

  return _react["default"].createElement(_styled.StyledFieldset, {
    className: className,
    style: style,
    id: id
  }, _react["default"].createElement(_RenderIf["default"], {
    isTrue: !!label
  }, _react["default"].createElement(_styled.StyledLabel, null, _react["default"].createElement(_RequiredAsterisk["default"], {
    required: required
  }), label)), _react["default"].createElement(_inputItems["default"], {
    value: value,
    disabled: disabled,
    readOnly: readOnly,
    error: error,
    tabIndex: tabIndex,
    onClick: onClick,
    onChange: handleOnChange,
    onFocus: handleOnFocus,
    onBlur: onBlur,
    onKeyDown: onKeyDown,
    onPaste: handleOnPaste,
    focusedIndex: focusedIndex,
    ref: inputRef
  }), _react["default"].createElement(_RenderIf["default"], {
    isTrue: !!bottomHelpText
  }, _react["default"].createElement(_styled.StyledHelpText, null, bottomHelpText)), _react["default"].createElement(_RenderIf["default"], {
    isTrue: !!error
  }, _react["default"].createElement(_styled.StyledErrorMessage, null, error)));
});

CodeInput.propTypes = {
  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** Specifies the value of CodeInput. */
  value: _propTypes["default"].string,

  /** Specifies the label CodeInput. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Shows the help message below the CodeInput */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies the numeric length to be filled. */
  length: _propTypes["default"].number,

  /** Specifies that the CodeInput element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that the CodeInput field must be filled before submitting the form. */
  required: _propTypes["default"].bool,

  /** Specifies that the CodeInput is read-only. */
  readOnly: _propTypes["default"].bool,

  /** Specifies that the CodeInput must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the value changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element receives the focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The action triggered when a key is pressed on the element. */
  onKeyDown: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
CodeInput.defaultProps = {
  id: undefined,
  value: '',
  label: undefined,
  bottomHelpText: undefined,
  length: 4,
  disabled: false,
  required: false,
  readOnly: false,
  error: null,
  tabIndex: undefined,
  onClick: function onClick() {},
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onKeyDown: function onKeyDown() {},
  className: undefined,
  style: undefined
};
var _default = CodeInput;
exports["default"] = _default;