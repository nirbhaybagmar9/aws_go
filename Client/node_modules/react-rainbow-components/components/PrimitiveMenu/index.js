"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _menuContent = _interopRequireDefault(require("./menuContent"));

var _context = require("./context");

var _utils = require("./utils");

var _constants = require("./../../libs/constants");

var _container = _interopRequireDefault(require("./styled/container"));

var _dropdown = _interopRequireDefault(require("./styled/dropdown"));

var _content = _interopRequireDefault(require("./styled/content"));

var PrimitiveMenu =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(PrimitiveMenu, _Component);

  function PrimitiveMenu(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, PrimitiveMenu);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(PrimitiveMenu).call(this, props));
    _this.containerRef = _react["default"].createRef();
    _this.triggerRef = _react["default"].createRef();
    _this.toggleMenu = _this.toggleMenu.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyEscapePressed = _this.handleKeyEscapePressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyDownPressed = _this.handleKeyDownPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyUpPressed = _this.handleKeyUpPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyEnterPressed = _this.handleKeyEnterPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
    _this.closeMenu = _this.closeMenu.bind((0, _assertThisInitialized2["default"])(_this));
    _this.hoverChild = _this.hoverChild.bind((0, _assertThisInitialized2["default"])(_this));
    _this.registerChild = _this.registerChild.bind((0, _assertThisInitialized2["default"])(_this));
    _this.unregisterChild = _this.unregisterChild.bind((0, _assertThisInitialized2["default"])(_this));
    _this.state = {
      isOpen: false,
      childrenRefs: [],
      childFocusedIndex: -1,
      context: {
        privateOnClose: _this.closeMenu,
        privateRegisterChild: _this.registerChild,
        privateUnregisterChild: _this.unregisterChild,
        privateOnHover: _this.hoverChild
      }
    };
    return _this;
  }

  (0, _createClass2["default"])(PrimitiveMenu, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('click', this.handleClick);
      window.removeEventListener('touchstart', this.handleClick);
    }
  }, {
    key: "focusChild",
    value: function focusChild(index) {
      var isLoading = this.props.isLoading;
      var childrenRefs = this.state.childrenRefs;

      if (isLoading || !childrenRefs[index]) {
        return null;
      }

      this.setState({
        childFocusedIndex: index
      });
      return childrenRefs[index].focus();
    }
  }, {
    key: "handleKeyEscapePressed",
    value: function handleKeyEscapePressed() {
      this.toggleMenu();
      return this.triggerRef.current.focus();
    }
  }, {
    key: "handleKeyDownPressed",
    value: function handleKeyDownPressed() {
      var _this$state = this.state,
          childrenRefs = _this$state.childrenRefs,
          childFocusedIndex = _this$state.childFocusedIndex;
      var lastChild = childrenRefs.length - 1;
      var isLastChild = childFocusedIndex === lastChild;
      var isBetweenFirstAndLast = childFocusedIndex >= 0 && !isLastChild;
      var isInvalidIndexOrLast = childFocusedIndex === -1 || isLastChild;

      if (isBetweenFirstAndLast) {
        return this.focusChild(childFocusedIndex + 1);
      }

      if (isInvalidIndexOrLast) {
        return this.focusChild(0);
      }

      return null;
    }
  }, {
    key: "handleKeyUpPressed",
    value: function handleKeyUpPressed() {
      var _this$state2 = this.state,
          childrenRefs = _this$state2.childrenRefs,
          childFocusedIndex = _this$state2.childFocusedIndex;
      var isFirstChild = childFocusedIndex === 0;
      var isValidIndexGreaterThanFirst = childFocusedIndex >= 0 && !isFirstChild;
      var isInvalidIndexOrFirst = childFocusedIndex === -1 || isFirstChild;
      var lastChild = childrenRefs.length - 1;

      if (isValidIndexGreaterThanFirst) {
        return this.focusChild(childFocusedIndex - 1);
      }

      if (isInvalidIndexOrFirst) {
        return this.focusChild(lastChild);
      }

      return null;
    }
  }, {
    key: "handleKeyEnterPressed",
    value: function handleKeyEnterPressed() {
      var _this$state3 = this.state,
          childrenRefs = _this$state3.childrenRefs,
          childFocusedIndex = _this$state3.childFocusedIndex;
      var isValidIndex = childFocusedIndex >= 0;

      if (isValidIndex) {
        return childrenRefs[childFocusedIndex].click();
      }

      return null;
    }
  }, {
    key: "focusMatchedItem",
    value: function focusMatchedItem(matchedItem) {
      var childrenRefs = this.state.childrenRefs;
      var itemIndex = (0, _utils.findItemIndex)(childrenRefs, matchedItem);
      return this.focusChild(itemIndex);
    }
  }, {
    key: "findItemByKeyPressed",
    value: function findItemByKeyPressed(key) {
      var _this$state4 = this.state,
          childrenRefs = _this$state4.childrenRefs,
          childFocusedIndex = _this$state4.childFocusedIndex,
          matchedKeyPressed = _this$state4.matchedKeyPressed;

      if (matchedKeyPressed) {
        var _newChildrenRefs = childrenRefs.slice(childFocusedIndex + 1);

        var _matchedItem = (0, _utils.findItemByKey)(key, _newChildrenRefs);

        if (_matchedItem) {
          return this.focusMatchedItem(_matchedItem);
        }

        var newMatchedItem = (0, _utils.findItemByKey)(key, childrenRefs);
        if (newMatchedItem) this.focusChild((0, _utils.findItemIndex)(childrenRefs, newMatchedItem));
        return null;
      }

      var newChildrenRefs = childrenRefs.slice(childFocusedIndex + 1);
      var matchedItem = (0, _utils.findItemByKey)(key, newChildrenRefs);

      if (matchedItem) {
        this.setState({
          matchedKeyPressed: key
        });
        return this.focusMatchedItem(matchedItem);
      }

      return null;
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      var isOpen = this.state.isOpen;

      if (isOpen) {
        var _keyHandlerMap;

        if (event.keyCode !== _constants.TAB_KEY) event.preventDefault();
        var keyHandlerMap = (_keyHandlerMap = {}, (0, _defineProperty2["default"])(_keyHandlerMap, _constants.DOWN_KEY, this.handleKeyDownPressed), (0, _defineProperty2["default"])(_keyHandlerMap, _constants.UP_KEY, this.handleKeyUpPressed), (0, _defineProperty2["default"])(_keyHandlerMap, _constants.ESCAPE_KEY, this.handleKeyEscapePressed), (0, _defineProperty2["default"])(_keyHandlerMap, _constants.TAB_KEY, this.toggleMenu), (0, _defineProperty2["default"])(_keyHandlerMap, _constants.ENTER_KEY, this.handleKeyEnterPressed), _keyHandlerMap);

        if (keyHandlerMap[event.keyCode]) {
          return keyHandlerMap[event.keyCode]();
        }

        return this.findItemByKeyPressed(event.key);
      }

      return null;
    }
  }, {
    key: "registerChild",
    value: function registerChild(childRef) {
      var childrenRefs = this.state.childrenRefs;

      var _getChildMenuItemNode = (0, _utils.getChildMenuItemNodes)(this.containerRef.current),
          _getChildMenuItemNode2 = (0, _toArray2["default"])(_getChildMenuItemNode),
          nodes = _getChildMenuItemNode2.slice(0);

      var newChildrenRefs = (0, _utils.insertChildOrderly)(childrenRefs, childRef, nodes);
      this.setState({
        childrenRefs: newChildrenRefs
      });
    }
  }, {
    key: "unregisterChild",
    value: function unregisterChild(childRef) {
      var childrenRefs = this.state.childrenRefs;
      var newChildrenRefs = childrenRefs.filter(function (child) {
        return child !== childRef;
      });
      this.setState({
        childrenRefs: newChildrenRefs
      });
    }
  }, {
    key: "hoverChild",
    value: function hoverChild(event, childRef) {
      return this.focusMatchedItem(childRef);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var isClickInsidePrimitiveMenu = this.containerRef.current.contains(event.target);

      if (isClickInsidePrimitiveMenu) {
        return null;
      }

      return this.closeMenu();
    }
  }, {
    key: "openMenu",
    value: function openMenu() {
      var _this2 = this;

      window.addEventListener('click', this.handleClick);
      window.addEventListener('touchstart', this.handleClick);
      setTimeout(function () {
        return _this2.focusChild(0);
      }, 0);
      return this.setState({
        isOpen: true
      });
    }
  }, {
    key: "closeMenu",
    value: function closeMenu() {
      window.removeEventListener('click', this.handleClick);
      window.removeEventListener('touchstart', this.handleClick);
      return this.setState({
        isOpen: false,
        childFocusedIndex: -1
      });
    }
  }, {
    key: "toggleMenu",
    value: function toggleMenu() {
      var isOpen = this.state.isOpen;

      if (isOpen) {
        return this.closeMenu();
      }

      return this.openMenu();
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.triggerRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.triggerRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.triggerRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          title = _this$props.title,
          assistiveText = _this$props.assistiveText,
          isLoading = _this$props.isLoading,
          children = _this$props.children,
          id = _this$props.id,
          className = _this$props.className,
          menuAlignment = _this$props.menuAlignment,
          menuSize = _this$props.menuSize,
          Trigger = _this$props.trigger,
          rest = (0, _objectWithoutProperties2["default"])(_this$props, ["style", "title", "assistiveText", "isLoading", "children", "id", "className", "menuAlignment", "menuSize", "trigger"]);
      var _this$state5 = this.state,
          context = _this$state5.context,
          isOpen = _this$state5.isOpen;
      var ariaLabel = title || assistiveText;
      return _react["default"].createElement(_container["default"], {
        id: id,
        role: "presentation",
        className: className,
        style: style,
        onKeyDown: this.handleKeyPressed,
        ref: this.containerRef
      }, _react["default"].createElement(Trigger, (0, _extends2["default"])({}, rest, {
        isOpen: isOpen,
        title: title,
        ariaExpanded: isOpen,
        ariaHaspopup: true,
        assistiveText: assistiveText,
        onClick: this.toggleMenu,
        ref: this.triggerRef
      })), _react["default"].createElement(_dropdown["default"], {
        "data-id": "primitive-menu_dropdown",
        menuSize: menuSize,
        menuAlignment: menuAlignment,
        isLoading: isLoading,
        isOpen: isOpen
      }, _react["default"].createElement(_content["default"], {
        role: "menu",
        "aria-label": ariaLabel
      }, _react["default"].createElement(_menuContent["default"], {
        isLoading: isLoading
      }, _react["default"].createElement(_context.Provider, {
        value: context
      }, children)))));
    }
  }]);
  return PrimitiveMenu;
}(_react.Component);

exports["default"] = PrimitiveMenu;
PrimitiveMenu.propTypes = {
  /** The content of the PrimitiveMenu. Used to render the menuItem elements
   * when the PrimitiveMenu is open. */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** The size of the menu. Options include xx-small, x-small, medium, or large.
   * This value defaults to xx-small. */
  menuSize: _propTypes["default"].oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),

  /** Determines the alignment of the menu relative to the trigger element.
   * Available options are: left, center, right, bottom, bottom-left, bottom-right.
   * This value defaults to left. */
  menuAlignment: _propTypes["default"].oneOf(['left', 'right', 'bottom', 'center', 'bottom-right', 'bottom-left']),

  /** If is set to true, then is showed a loading symbol. */
  isLoading: _propTypes["default"].bool,

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The trigger element. */
  trigger: _propTypes["default"].func.isRequired
};
PrimitiveMenu.defaultProps = {
  children: null,
  menuSize: 'xx-small',
  menuAlignment: 'left',
  isLoading: false,
  title: undefined,
  assistiveText: undefined,
  className: undefined,
  style: undefined,
  id: undefined
};