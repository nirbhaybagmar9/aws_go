"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require("./../"));

var _ButtonIcon = _interopRequireDefault(require("../../ButtonIcon"));

describe('<PrimitiveMenu/>', function () {
  it('should focus the button when the focus method is called', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"]
    }));
    component.instance().focus();
    var focusedElementDataId = document.activeElement.getAttribute('data-id');
    var buttonDataId = component.find('button').prop('data-id');
    expect(focusedElementDataId).toBe(buttonDataId);
  });
  it('should blur the button when the blur method is called', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"]
    }));
    var instance = component.instance();
    var buttonDataId = component.find('button').prop('data-id');
    instance.focus();
    expect(document.activeElement.getAttribute('data-id')).toBe(buttonDataId);
    instance.blur();
    expect(document.activeElement.getAttribute('data-id')).toBeNull();
  });
  it('should set the isLoading passed in the MenuContent', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"],
      isLoading: true
    }, _react["default"].createElement("span", null)));
    expect(component.find('MenuContent').prop('isLoading')).toBe(true);
  });
  it('should render the children passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"]
    }, _react["default"].createElement("span", {
      "data-id": "menu-children"
    }, "menu content")));
    expect(component.find('span[data-id="menu-children"]').text()).toBe('menu content');
  });
  it('should set the role as menu in the ul element', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"]
    }, _react["default"].createElement("span", null)));
    expect(component.find('ul').prop('role')).toBe('menu');
  });
  it('should set the title passed as the aria-label in the ul element', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"],
      title: "button title",
      assistiveText: "assistive description"
    }, _react["default"].createElement("span", null)));
    expect(component.find('ul').prop('aria-label')).toBe('button title');
  });
  it('should set the assistiveText passed as the aria-label in the ul element when the title is not passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      trigger: _ButtonIcon["default"],
      assistiveText: "assistive description"
    }, _react["default"].createElement("span", null)));
    expect(component.find('ul').prop('aria-label')).toBe('assistive description');
  });
});