"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var scroll = _interopRequireWildcard(require("../../../libs/scrollController"));

var resolver = _interopRequireWildcard(require("../ContentMetaResolver"));

var mockDisableScroll = jest.fn();
var mockEnableScroll = jest.fn();
scroll.disableBodyScroll = mockDisableScroll;
scroll.enableBodyScroll = mockEnableScroll;
describe('<InternalOverlay />', function () {
  beforeEach(function () {
    Element.prototype.getClientRects = jest.fn(function () {
      return [{
        bottom: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0,
        width: 0,
        x: 0,
        y: 0
      }];
    });
    mockDisableScroll.mockReset();
    mockEnableScroll.mockReset();
  });
  it('should render if isVisible is true', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      render: function render() {
        return _react["default"].createElement("div", {
          id: "test-id"
        });
      },
      triggerElementRef: {},
      isVisible: true
    }));
    expect(component.find('[id="test-id"]').exists()).toBe(true);
  });
  it('should not render if isVisible is false', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      render: function render() {
        return _react["default"].createElement("div", {
          id: "test-id"
        });
      },
      triggerElementRef: {}
    }));
    expect(component.find('[id="test-id"]').exists()).toBe(false);
  });
  it('should disable scroll when isVisible is true', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      render: function render() {
        return _react["default"].createElement("div", {
          id: "test-id"
        });
      },
      triggerElementRef: {}
    }));
    component.setProps({
      isVisible: true
    });
    component.setProps({});
    expect(mockDisableScroll).toHaveBeenCalledTimes(1);
  });
  it('should enable scroll when isVisible is false', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      render: function render() {
        return _react["default"].createElement("div", {
          id: "test-id"
        });
      },
      triggerElementRef: {},
      isVisible: true
    }));
    mockEnableScroll.mockClear();
    component.setProps({
      isVisible: false
    });
    expect(mockEnableScroll).toHaveBeenCalledTimes(1);
  });
  it('should resolve content meta', function () {
    var mockContentMetaResolver = jest.spyOn(resolver, 'default');
    (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      render: function render() {
        return _react["default"].createElement("div", {
          id: "test-id"
        });
      },
      triggerElementRef: {},
      isVisible: true
    }));
    expect(mockContentMetaResolver).toHaveBeenCalledTimes(1);
  });
});