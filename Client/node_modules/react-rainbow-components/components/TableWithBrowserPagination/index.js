"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Pagination = _interopRequireDefault(require("../Pagination"));

var _Table = _interopRequireDefault(require("../Table"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _options = _interopRequireDefault(require("./options"));

var _getPageItems = _interopRequireDefault(require("./helpers/getPageItems"));

var _container = _interopRequireDefault(require("./styled/container"));

var _paginationContainer = _interopRequireDefault(require("./styled/paginationContainer"));

var _selectContainer = _interopRequireDefault(require("./styled/selectContainer"));

var _select = _interopRequireDefault(require("./styled/select"));

/**
 * It implement a client side pagination experience. It basically wire up the Table and
 * the Pagination component in a compose manner and keep the internal state of the active page
 * based on a new prop `pageSize`.
 * @category DataView
 */
var TableWithBrowserPagination =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TableWithBrowserPagination, _Component);

  function TableWithBrowserPagination(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TableWithBrowserPagination);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TableWithBrowserPagination).call(this, props));
    var data = props.data,
        pageSize = props.pageSize;
    _this.state = {
      activePage: 1,
      pageItems: (0, _getPageItems["default"])({
        data: data,
        activePage: 1,
        pageSize: pageSize
      })
    };
    _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleSelectChange = _this.handleSelectChange.bind((0, _assertThisInitialized2["default"])(_this));
    _this.table = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(TableWithBrowserPagination, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          data = _this$props.data,
          pageSize = _this$props.pageSize;

      if (prevProps.data !== data || prevProps.pageSize !== pageSize) {
        this.updateData();
      }
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var _this$props2 = this.props,
          data = _this$props2.data,
          pageSize = _this$props2.pageSize;
      var activePage = this.state.activePage;
      var totalPages = Math.ceil(data.length / pageSize);
      var nextActivePage = activePage <= totalPages ? activePage : 1;
      this.setState({
        activePage: nextActivePage,
        pageItems: (0, _getPageItems["default"])({
          data: data,
          activePage: nextActivePage,
          pageSize: pageSize
        })
      });
    }
  }, {
    key: "moveToPage",
    value: function moveToPage(page) {
      var _this$props3 = this.props,
          data = _this$props3.data,
          pageSize = _this$props3.pageSize;
      this.setState({
        activePage: page,
        pageItems: (0, _getPageItems["default"])({
          data: data,
          activePage: page,
          pageSize: pageSize
        })
      });
      this.table.current.scrollTop();
    }
  }, {
    key: "handleChange",
    value: function handleChange(event, page) {
      this.moveToPage(page);
    }
  }, {
    key: "handleSelectChange",
    value: function handleSelectChange(event) {
      var page = Number(event.target.value);
      this.moveToPage(page);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          style = _this$props4.style,
          className = _this$props4.className,
          paginationAlignment = _this$props4.paginationAlignment,
          pageSize = _this$props4.pageSize,
          data = _this$props4.data,
          children = _this$props4.children,
          rest = (0, _objectWithoutProperties2["default"])(_this$props4, ["style", "className", "paginationAlignment", "pageSize", "data", "children"]);
      var _this$state = this.state,
          activePage = _this$state.activePage,
          pageItems = _this$state.pageItems;
      var pages = Math.ceil(data.length / pageSize);
      var showPagination = pages > 1;
      return _react["default"].createElement(_container["default"], {
        className: className,
        style: style
      }, _react["default"].createElement(_Table["default"], (0, _extends2["default"])({
        data: pageItems
      }, rest, {
        ref: this.table
      }), children), _react["default"].createElement(_RenderIf["default"], {
        isTrue: showPagination
      }, _react["default"].createElement(_paginationContainer["default"], {
        paginationAlignment: paginationAlignment
      }, _react["default"].createElement(_Pagination["default"], {
        pages: pages,
        activePage: activePage,
        onChange: this.handleChange
      }), _react["default"].createElement(_RenderIf["default"], {
        isTrue: pages > 6
      }, _react["default"].createElement(_selectContainer["default"], null, _react["default"].createElement(_select["default"], {
        onChange: this.handleSelectChange,
        value: activePage
      }, _react["default"].createElement(_options["default"], {
        pages: pages
      })))))));
    }
  }]);
  return TableWithBrowserPagination;
}(_react.Component);

exports["default"] = TableWithBrowserPagination;
TableWithBrowserPagination.propTypes = {
  /** Determines the alignment of the pagination relative to the container.
   * Available options are: center, left, and right.
   * This value defaults to center. */
  paginationAlignment: _propTypes["default"].oneOf(['center', 'left', 'right']),

  /** Indicates the amount of data that will be showed per page. */
  pageSize: _propTypes["default"].number,

  /** An array containing the objects(rows) to be displayed. */
  data: _propTypes["default"].array,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node
};
TableWithBrowserPagination.defaultProps = {
  paginationAlignment: 'center',
  className: undefined,
  style: undefined,
  pageSize: Infinity,
  data: [],
  children: undefined
};