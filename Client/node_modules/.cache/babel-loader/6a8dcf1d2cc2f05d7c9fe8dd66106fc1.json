{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _body = _interopRequireDefault(require(\"./body\"));\n\nvar _head = _interopRequireDefault(require(\"./head\"));\n\nvar _sort = require(\"./helpers/sort\");\n\nvar _columns = require(\"./helpers/columns\");\n\nvar _resizer = require(\"./helpers/resizer\");\n\nvar _rows = require(\"./helpers/rows\");\n\nvar _selector = require(\"./helpers/selector\");\n\nvar _data = require(\"./helpers/data\");\n\nvar _ResizeSensor = _interopRequireDefault(require(\"../../libs/ResizeSensor\"));\n\nvar _debounce = _interopRequireDefault(require(\"../../libs/debounce\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _empty = _interopRequireDefault(require(\"./body/icons/empty\"));\n\nvar _container = _interopRequireDefault(require(\"./styled/container\"));\n\nvar _scrollableX = _interopRequireDefault(require(\"./styled/scrollableX\"));\n\nvar _scrollableY = _interopRequireDefault(require(\"./styled/scrollableY\"));\n\nvar _table = _interopRequireDefault(require(\"./styled/table\"));\n\nvar _tableBody = _interopRequireDefault(require(\"./styled/tableBody\"));\n/* eslint-disable no-console */\n\n/**\n * Data tables display information in a way thatâ€™s easy to scan,\n * so that users can look for patterns and insights.\n * @category DataView\n */\n\n\nvar Table = /*#__PURE__*/function (_Component) {\n  (0, _inherits2[\"default\"])(Table, _Component);\n\n  function Table(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Table);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Table).call(this, props));\n    var children = props.children,\n        showCheckboxColumn = props.showCheckboxColumn,\n        keyField = props.keyField,\n        data = props.data,\n        showRowNumberColumn = props.showRowNumberColumn,\n        rowNumberOffset = props.rowNumberOffset,\n        maxRowSelection = props.maxRowSelection,\n        minColumnWidth = props.minColumnWidth,\n        maxColumnWidth = props.maxColumnWidth,\n        selectedRows = props.selectedRows;\n    _this.state = {\n      columns: (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth\n      }),\n      tableWidth: undefined,\n      rows: (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection && Number(maxRowSelection),\n        selectedRowsKeys: {}\n      }),\n      bulkSelection: 'none'\n    };\n    _this.indexes = (0, _rows.getIndexes)(_this.state.rows);\n    _this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, _this.indexes);\n    _this.tableId = (0, _utils.uniqueId)('table');\n    _this.tableContainerRef = _react[\"default\"].createRef();\n    _this.resizeTarget = _react[\"default\"].createRef();\n    _this.handleSort = _this.handleSort.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateColumnsAndTableWidth = _this.updateColumnsAndTableWidth.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectRow = _this.handleSelectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectRow = _this.handleDeselectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectAllRows = _this.handleSelectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectAllRows = _this.handleDeselectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.scrollableY = _react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Table, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.widthObserver = new _ResizeSensor[\"default\"](this.resizeTarget.current, (0, _debounce[\"default\"])(this.updateColumnsAndTableWidth, 200));\n      this.updateRows();\n      this.updateColumnsAndTableWidth();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevChildren = prevProps.children,\n          prevShowCheckboxColumn = prevProps.showCheckboxColumn,\n          prevMaxRowSelection = prevProps.maxRowSelection,\n          prevSelectedRows = prevProps.selectedRows,\n          prevData = prevProps.data,\n          prevMinColumnWidth = prevProps.minColumnWidth,\n          prevMaxColumnWidth = prevProps.maxColumnWidth;\n      var _this$props = this.props,\n          children = _this$props.children,\n          showCheckboxColumn = _this$props.showCheckboxColumn,\n          showRowNumberColumn = _this$props.showRowNumberColumn,\n          rowNumberOffset = _this$props.rowNumberOffset,\n          maxRowSelection = _this$props.maxRowSelection,\n          selectedRows = _this$props.selectedRows,\n          data = _this$props.data,\n          keyField = _this$props.keyField,\n          minColumnWidth = _this$props.minColumnWidth,\n          maxColumnWidth = _this$props.maxColumnWidth,\n          onRowSelection = _this$props.onRowSelection;\n      var prevColumns = (0, _columns.getColumns)({\n        children: prevChildren,\n        showCheckboxColumn: prevShowCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: prevMinColumnWidth,\n        maxColumnWidth: prevMaxColumnWidth\n      });\n      var currentColumns = (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth\n      });\n      var isNotSameMaxRowSelection = prevMaxRowSelection !== maxRowSelection;\n      var isNotSameData = data !== prevData;\n\n      if (isNotSameMaxRowSelection || isNotSameData) {\n        this.updateRows();\n      }\n\n      if ((0, _columns.isNotSameColumns)(prevColumns, currentColumns)) {\n        this.updateColumnsAndTableWidth(currentColumns);\n      }\n\n      var isNotSameSelectedRows = prevSelectedRows !== selectedRows;\n\n      if (isNotSameSelectedRows) {\n        var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n\n        if (selectedRowsKeysLength !== selectedRows.length) {\n          this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, this.indexes);\n          var updatedRows = (0, _rows.getRows)({\n            keyField: keyField,\n            rows: (0, _data.normalizeData)(data),\n            maxRowSelection: maxRowSelection,\n            selectedRowsKeys: this.selectedRowsKeys\n          });\n          onRowSelection(this.getSelectedRows(updatedRows));\n          this.updateRows();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.widthObserver.detach();\n    }\n  }, {\n    key: \"getTableWidthFromDom\",\n    value: function getTableWidthFromDom() {\n      var containerElement = this.tableContainerRef.current;\n\n      if (containerElement) {\n        return containerElement.offsetWidth;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getSelectedRows\",\n    value: function getSelectedRows(rows) {\n      var data = this.props.data;\n      return (0, _data.normalizeData)(data).filter(function (item, index) {\n        return rows[index].isSelected;\n      });\n    }\n  }, {\n    key: \"getMaxRowSelection\",\n    value: function getMaxRowSelection() {\n      var _this$props2 = this.props,\n          maxRowSelection = _this$props2.maxRowSelection,\n          data = _this$props2.data;\n      var rowsLength = (0, _data.normalizeData)(data).length;\n      var maxRowSelectionNumber = Number(maxRowSelection);\n\n      if (!(0, _selector.isValidMaxRowSelection)(maxRowSelection, rowsLength)) {\n        return rowsLength;\n      }\n\n      return maxRowSelectionNumber;\n    }\n    /**\n     * It will scroll to the top of the Y scrollable container.\n     * @public\n     */\n\n  }, {\n    key: \"scrollTop\",\n    value: function scrollTop() {\n      this.scrollableY.current.scrollTop = 0;\n    }\n  }, {\n    key: \"updateRows\",\n    value: function updateRows() {\n      var _this$props3 = this.props,\n          keyField = _this$props3.keyField,\n          selectedRows = _this$props3.selectedRows,\n          onRowSelection = _this$props3.onRowSelection,\n          data = _this$props3.data;\n      var maxRowSelection = this.getMaxRowSelection();\n      var newRows = (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.indexes = (0, _rows.getIndexes)(newRows);\n      var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n      var currentSelectedRows = this.getSelectedRows(newRows);\n      var isNotSameSelectedRowsWithNewData = selectedRowsKeysLength !== currentSelectedRows.length;\n\n      if (isNotSameSelectedRowsWithNewData) {\n        onRowSelection(currentSelectedRows);\n        this.selectedRowsKeys = (0, _selector.getSelectedRowKeys)(currentSelectedRows, keyField);\n      }\n\n      this.setState({\n        rows: (0, _selector.getRowsWithInitalSelectedRows)({\n          rows: newRows,\n          selectedRows: selectedRows,\n          maxRowSelection: maxRowSelection,\n          indexes: this.indexes,\n          selectedRowsKeys: this.selectedRowsKeys\n        }),\n        bulkSelection: (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        })\n      });\n    }\n  }, {\n    key: \"isScrollActive\",\n    value: function isScrollActive() {\n      if (this.scrollableY.current) {\n        var _this$scrollableY$cur = this.scrollableY.current,\n            clientHeight = _this$scrollableY$cur.clientHeight,\n            scrollHeight = _this$scrollableY$cur.scrollHeight;\n        return clientHeight < scrollHeight;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateColumnsAndTableWidth\",\n    value: function updateColumnsAndTableWidth(newColumns) {\n      var columns = this.state.columns;\n      var _this$props4 = this.props,\n          minColumnWidth = _this$props4.minColumnWidth,\n          maxColumnWidth = _this$props4.maxColumnWidth;\n      var domTableWidth = this.getTableWidthFromDom();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || Infinity;\n      var updatedColumns = (0, _resizer.getUpdatedColumns)({\n        columns: newColumns || columns,\n        domTableWidth: domTableWidth,\n        minColumnWidth: minColWidth,\n        maxColumnWidth: maxColWidth\n      });\n      this.setState({\n        columns: updatedColumns\n      });\n\n      if (this.hasFlexibleColumns()) {\n        this.setState({\n          tableWidth: (0, _resizer.getTableWidth)(updatedColumns)\n        });\n      }\n    }\n  }, {\n    key: \"handleSelectAllRows\",\n    value: function handleSelectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenSelectAll)({\n        rows: rows,\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleDeselectAllRows\",\n    value: function handleDeselectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselectAll)(rows);\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: this.getMaxRowSelection(),\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleSelectRow\",\n    value: function handleSelectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n\n      if (maxRowSelection > 1) {\n        var updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          indexes: indexes,\n          isMultiple: isMultiple,\n          rowKeyValue: rowKeyValue,\n          lastSelectedRowKey: this.lastSelectedRowKey,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        var bulkSelection = (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        this.setState({\n          rows: updatedRows,\n          bulkSelection: bulkSelection\n        });\n        onRowSelection(this.getSelectedRows(updatedRows));\n      } else {\n        this.selectedRowsKeys = {};\n        this.selectedRowsKeys[rowKeyValue] = true;\n\n        var _updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          rowKeyValue: rowKeyValue,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n\n        this.setState({\n          rows: _updatedRows\n        });\n        onRowSelection(this.getSelectedRows(_updatedRows));\n      }\n\n      this.lastSelectedRowKey = rowKeyValue;\n    }\n  }, {\n    key: \"handleDeselectRow\",\n    value: function handleDeselectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselect)({\n        maxRowSelection: maxRowSelection,\n        rows: rows,\n        indexes: indexes,\n        isMultiple: isMultiple,\n        rowKeyValue: rowKeyValue,\n        lastSelectedRowKey: this.lastSelectedRowKey,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      this.lastSelectedRowKey = rowKeyValue;\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"hasFlexibleColumns\",\n    value: function hasFlexibleColumns() {\n      var columns = this.state.columns;\n      return columns.some(function (column) {\n        return column.isResized !== true;\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(widthDelta, colIndex) {\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          tableWidth = _this$state.tableWidth;\n\n      if (widthDelta !== 0) {\n        this.setState({\n          columns: (0, _resizer.getResizedColumns)({\n            columns: columns,\n            colIndex: colIndex,\n            widthDelta: widthDelta\n          }),\n          tableWidth: tableWidth + widthDelta\n        });\n      }\n    }\n  }, {\n    key: \"handleSort\",\n    value: function handleSort(event, field, sortDirection) {\n      var _this$props5 = this.props,\n          onSort = _this$props5.onSort,\n          sortedBy = _this$props5.sortedBy;\n      var nextSortDirection = (0, _sort.getNextSortDirection)(field, sortedBy, sortDirection);\n      onSort(event, field, nextSortDirection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          id = _this$props6.id,\n          data = _this$props6.data,\n          sortedBy = _this$props6.sortedBy,\n          sortDirection = _this$props6.sortDirection,\n          defaultSortDirection = _this$props6.defaultSortDirection,\n          resizeColumnDisabled = _this$props6.resizeColumnDisabled,\n          rowNumberOffset = _this$props6.rowNumberOffset,\n          minColumnWidth = _this$props6.minColumnWidth,\n          maxColumnWidth = _this$props6.maxColumnWidth,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          isLoading = _this$props6.isLoading,\n          emptyIcon = _this$props6.emptyIcon,\n          emptyTitle = _this$props6.emptyTitle,\n          emptyDescription = _this$props6.emptyDescription,\n          keyField = _this$props6.keyField;\n      var _this$state2 = this.state,\n          columns = _this$state2.columns,\n          tableWidth = _this$state2.tableWidth,\n          rows = _this$state2.rows,\n          bulkSelection = _this$state2.bulkSelection;\n      var tableStyles = {\n        width: tableWidth\n      };\n      var maxRowSelection = this.getMaxRowSelection();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || 5000;\n      var isEmpty = data.length === 0;\n\n      if (keyField && typeof keyField === 'string') {\n        return _react[\"default\"].createElement(_container[\"default\"], {\n          id: id,\n          className: className,\n          style: style\n        }, _react[\"default\"].createElement(\"div\", {\n          ref: this.resizeTarget\n        }), _react[\"default\"].createElement(_container[\"default\"], null, _react[\"default\"].createElement(_scrollableX[\"default\"], {\n          ref: this.tableContainerRef\n        }, _react[\"default\"].createElement(_scrollableY[\"default\"], {\n          isEmpty: isEmpty,\n          isLoading: isLoading,\n          ref: this.scrollableY,\n          style: tableStyles\n        }, _react[\"default\"].createElement(_table[\"default\"], {\n          style: tableStyles\n        }, _react[\"default\"].createElement(\"thead\", null, _react[\"default\"].createElement(\"tr\", null, _react[\"default\"].createElement(_head[\"default\"], {\n          columns: columns,\n          sortedBy: sortedBy,\n          sortDirection: sortDirection,\n          defaultSortDirection: defaultSortDirection,\n          resizeColumnDisabled: resizeColumnDisabled,\n          minColumnWidth: minColWidth,\n          maxColumnWidth: maxColWidth,\n          onSort: this.handleSort,\n          onResize: this.handleResize,\n          onSelectAllRows: this.handleSelectAllRows,\n          onDeselectAllRows: this.handleDeselectAllRows,\n          tableId: this.tableId,\n          maxRowSelection: maxRowSelection,\n          bulkSelection: bulkSelection,\n          hasScroll: this.isScrollActive()\n        }))), _react[\"default\"].createElement(_tableBody[\"default\"], {\n          rowNumberOffset: rowNumberOffset\n        }, _react[\"default\"].createElement(_body[\"default\"], {\n          data: (0, _data.normalizeData)(data),\n          columns: columns,\n          rows: rows,\n          tableId: this.tableId,\n          isLoading: isLoading,\n          emptyIcon: emptyIcon,\n          emptyTitle: emptyTitle,\n          emptyDescription: emptyDescription,\n          onSelectRow: this.handleSelectRow,\n          onDeselectRow: this.handleDeselectRow\n        })))))));\n      }\n\n      console.error('The \"keyField\" is a required prop of the Table component.');\n      return null;\n    }\n  }]);\n  return Table;\n}(_react.Component);\n\nexports[\"default\"] = Table;\nTable.propTypes = {\n  /** An array containing the objects(rows) to be displayed. */\n  data: _propTypes[\"default\"].arrayOf(Object),\n\n  /** The column fieldName that controls the sorting order.\n   * Sort the data using the onsort event handler. */\n  sortedBy: _propTypes[\"default\"].string,\n\n  /**\n   * Specifies the sorting direction, valid options are 'asc' or 'desc'.\n   */\n  sortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Specifies the default sorting direction on an unsorted column.\n   * Valid options include 'asc' and 'desc'.\n   * The default is 'asc' for sorting in ascending order. */\n  defaultSortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Action triggered when a column is sorted.\n   * Receive the event object, field and sortDirection. */\n  onSort: _propTypes[\"default\"].func,\n\n  /** Specifies whether column resizing is disabled. The default is false. */\n  resizeColumnDisabled: _propTypes[\"default\"].bool,\n\n  /** The minimum width for all columns. The default value is 50px. */\n  minColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The maximum width for all columns. The default value is Infinity. */\n  maxColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** Show or hide the checkbox column for row selection. To show set\n   * showCheckboxColumn to true. The default value is false. */\n  showCheckboxColumn: _propTypes[\"default\"].bool,\n\n  /** Shows or hides the row number column. Set to true to show the row number column. The default is false. */\n  showRowNumberColumn: _propTypes[\"default\"].bool,\n\n  /** Determines where to start counting the row number. The default is 0. */\n  rowNumberOffset: _propTypes[\"default\"].number,\n\n  /** The action triggered when a row is selected. Receive the selectedRows array. */\n  onRowSelection: _propTypes[\"default\"].func,\n\n  /** The maximum number of rows that can be selected. When the value is\n   * 1 the selection is made by radio buttons, otherwise with checkboxes. */\n  maxRowSelection: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** An array with a list of keyField values of the selected rows. */\n  selectedRows: _propTypes[\"default\"].array,\n\n  /** It is required for associate each row with a unique ID. Must be one of the data key.\n   * If it is not passed the component will not render.\n   */\n  keyField: _propTypes[\"default\"].string.isRequired,\n\n  /** Specifies whether data is being loaded. The default is false. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** The icon that appears in the message of the Table when is empty.\n   * If not passed a fallback icon will be showed. */\n  emptyIcon: _propTypes[\"default\"].node,\n\n  /** The title that appears in the message of the Table when is empty.\n   *  If not passed a fallback title will be showed.\n   */\n  emptyTitle: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The description that appears in the message of the Table when is empty.\n   *  If not passed a fallback description will be showed.\n   */\n  emptyDescription: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nTable.defaultProps = {\n  data: [],\n  sortedBy: undefined,\n  sortDirection: undefined,\n  defaultSortDirection: 'asc',\n  onSort: function onSort() {},\n  resizeColumnDisabled: false,\n  minColumnWidth: 50,\n  maxColumnWidth: Infinity,\n  showCheckboxColumn: false,\n  showRowNumberColumn: false,\n  rowNumberOffset: 0,\n  onRowSelection: function onRowSelection() {},\n  maxRowSelection: undefined,\n  selectedRows: [],\n  isLoading: false,\n  emptyIcon: _react[\"default\"].createElement(_empty[\"default\"], null),\n  emptyTitle: 'Itâ€™s empty here',\n  emptyDescription: 'Our robots did not find any match...',\n  id: undefined,\n  className: undefined,\n  style: undefined,\n  children: undefined\n};","map":{"version":3,"sources":["/home/sharad_bagmar/go/src/github.com/nirbhaybagmar9/aws_go/Client/node_modules/react-rainbow-components/components/Table/index.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_react","_propTypes","_body","_head","_sort","_columns","_resizer","_rows","_selector","_data","_ResizeSensor","_debounce","_utils","_empty","_container","_scrollableX","_scrollableY","_table","_tableBody","Table","_Component","props","_this","call","children","showCheckboxColumn","keyField","data","showRowNumberColumn","rowNumberOffset","maxRowSelection","minColumnWidth","maxColumnWidth","selectedRows","state","columns","getColumns","tableWidth","undefined","rows","getRows","normalizeData","Number","selectedRowsKeys","bulkSelection","indexes","getIndexes","getSelectedRowKeysFromSelectedRows","tableId","uniqueId","tableContainerRef","createRef","resizeTarget","handleSort","bind","handleResize","updateColumnsAndTableWidth","handleSelectRow","handleDeselectRow","handleSelectAllRows","handleDeselectAllRows","scrollableY","key","componentDidMount","widthObserver","current","updateRows","componentDidUpdate","prevProps","prevChildren","prevShowCheckboxColumn","prevMaxRowSelection","prevSelectedRows","prevData","prevMinColumnWidth","prevMaxColumnWidth","_this$props","onRowSelection","prevColumns","currentColumns","isNotSameMaxRowSelection","isNotSameData","isNotSameColumns","isNotSameSelectedRows","selectedRowsKeysLength","keys","length","updatedRows","getSelectedRows","componentWillUnmount","detach","getTableWidthFromDom","containerElement","offsetWidth","filter","item","index","isSelected","getMaxRowSelection","_this$props2","rowsLength","maxRowSelectionNumber","isValidMaxRowSelection","scrollTop","_this$props3","newRows","currentSelectedRows","isNotSameSelectedRowsWithNewData","getSelectedRowKeys","setState","getRowsWithInitalSelectedRows","getBulkSelectionState","isScrollActive","_this$scrollableY$cur","clientHeight","scrollHeight","newColumns","_this$props4","domTableWidth","minColWidth","maxColWidth","Infinity","updatedColumns","getUpdatedColumns","hasFlexibleColumns","getTableWidth","getUpdatedRowsWhenSelectAll","getUpdatedRowsWhenDeselectAll","event","isMultiple","rowKeyValue","getUpdatedRowsWhenSelect","lastSelectedRowKey","_updatedRows","getUpdatedRowsWhenDeselect","some","column","isResized","widthDelta","colIndex","_this$state","getResizedColumns","field","sortDirection","_this$props5","onSort","sortedBy","nextSortDirection","getNextSortDirection","render","_this$props6","id","defaultSortDirection","resizeColumnDisabled","style","className","isLoading","emptyIcon","emptyTitle","emptyDescription","_this$state2","tableStyles","width","isEmpty","createElement","ref","onResize","onSelectAllRows","onDeselectAllRows","hasScroll","onSelectRow","onDeselectRow","console","error","Component","propTypes","arrayOf","string","oneOf","func","bool","oneOfType","number","array","isRequired","node","object","defaultProps"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _body = _interopRequireDefault(require(\"./body\"));\n\nvar _head = _interopRequireDefault(require(\"./head\"));\n\nvar _sort = require(\"./helpers/sort\");\n\nvar _columns = require(\"./helpers/columns\");\n\nvar _resizer = require(\"./helpers/resizer\");\n\nvar _rows = require(\"./helpers/rows\");\n\nvar _selector = require(\"./helpers/selector\");\n\nvar _data = require(\"./helpers/data\");\n\nvar _ResizeSensor = _interopRequireDefault(require(\"../../libs/ResizeSensor\"));\n\nvar _debounce = _interopRequireDefault(require(\"../../libs/debounce\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _empty = _interopRequireDefault(require(\"./body/icons/empty\"));\n\nvar _container = _interopRequireDefault(require(\"./styled/container\"));\n\nvar _scrollableX = _interopRequireDefault(require(\"./styled/scrollableX\"));\n\nvar _scrollableY = _interopRequireDefault(require(\"./styled/scrollableY\"));\n\nvar _table = _interopRequireDefault(require(\"./styled/table\"));\n\nvar _tableBody = _interopRequireDefault(require(\"./styled/tableBody\"));\n\n/* eslint-disable no-console */\n\n/**\n * Data tables display information in a way thatâ€™s easy to scan,\n * so that users can look for patterns and insights.\n * @category DataView\n */\nvar Table =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Table, _Component);\n\n  function Table(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Table);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Table).call(this, props));\n    var children = props.children,\n        showCheckboxColumn = props.showCheckboxColumn,\n        keyField = props.keyField,\n        data = props.data,\n        showRowNumberColumn = props.showRowNumberColumn,\n        rowNumberOffset = props.rowNumberOffset,\n        maxRowSelection = props.maxRowSelection,\n        minColumnWidth = props.minColumnWidth,\n        maxColumnWidth = props.maxColumnWidth,\n        selectedRows = props.selectedRows;\n    _this.state = {\n      columns: (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth\n      }),\n      tableWidth: undefined,\n      rows: (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection && Number(maxRowSelection),\n        selectedRowsKeys: {}\n      }),\n      bulkSelection: 'none'\n    };\n    _this.indexes = (0, _rows.getIndexes)(_this.state.rows);\n    _this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, _this.indexes);\n    _this.tableId = (0, _utils.uniqueId)('table');\n    _this.tableContainerRef = _react[\"default\"].createRef();\n    _this.resizeTarget = _react[\"default\"].createRef();\n    _this.handleSort = _this.handleSort.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateColumnsAndTableWidth = _this.updateColumnsAndTableWidth.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectRow = _this.handleSelectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectRow = _this.handleDeselectRow.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelectAllRows = _this.handleSelectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleDeselectAllRows = _this.handleDeselectAllRows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.scrollableY = _react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Table, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.widthObserver = new _ResizeSensor[\"default\"](this.resizeTarget.current, (0, _debounce[\"default\"])(this.updateColumnsAndTableWidth, 200));\n      this.updateRows();\n      this.updateColumnsAndTableWidth();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevChildren = prevProps.children,\n          prevShowCheckboxColumn = prevProps.showCheckboxColumn,\n          prevMaxRowSelection = prevProps.maxRowSelection,\n          prevSelectedRows = prevProps.selectedRows,\n          prevData = prevProps.data,\n          prevMinColumnWidth = prevProps.minColumnWidth,\n          prevMaxColumnWidth = prevProps.maxColumnWidth;\n      var _this$props = this.props,\n          children = _this$props.children,\n          showCheckboxColumn = _this$props.showCheckboxColumn,\n          showRowNumberColumn = _this$props.showRowNumberColumn,\n          rowNumberOffset = _this$props.rowNumberOffset,\n          maxRowSelection = _this$props.maxRowSelection,\n          selectedRows = _this$props.selectedRows,\n          data = _this$props.data,\n          keyField = _this$props.keyField,\n          minColumnWidth = _this$props.minColumnWidth,\n          maxColumnWidth = _this$props.maxColumnWidth,\n          onRowSelection = _this$props.onRowSelection;\n      var prevColumns = (0, _columns.getColumns)({\n        children: prevChildren,\n        showCheckboxColumn: prevShowCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: prevMinColumnWidth,\n        maxColumnWidth: prevMaxColumnWidth\n      });\n      var currentColumns = (0, _columns.getColumns)({\n        children: children,\n        showCheckboxColumn: showCheckboxColumn,\n        showRowNumberColumn: showRowNumberColumn,\n        rowNumberOffset: rowNumberOffset,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth\n      });\n      var isNotSameMaxRowSelection = prevMaxRowSelection !== maxRowSelection;\n      var isNotSameData = data !== prevData;\n\n      if (isNotSameMaxRowSelection || isNotSameData) {\n        this.updateRows();\n      }\n\n      if ((0, _columns.isNotSameColumns)(prevColumns, currentColumns)) {\n        this.updateColumnsAndTableWidth(currentColumns);\n      }\n\n      var isNotSameSelectedRows = prevSelectedRows !== selectedRows;\n\n      if (isNotSameSelectedRows) {\n        var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n\n        if (selectedRowsKeysLength !== selectedRows.length) {\n          this.selectedRowsKeys = (0, _selector.getSelectedRowKeysFromSelectedRows)(selectedRows, this.indexes);\n          var updatedRows = (0, _rows.getRows)({\n            keyField: keyField,\n            rows: (0, _data.normalizeData)(data),\n            maxRowSelection: maxRowSelection,\n            selectedRowsKeys: this.selectedRowsKeys\n          });\n          onRowSelection(this.getSelectedRows(updatedRows));\n          this.updateRows();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.widthObserver.detach();\n    }\n  }, {\n    key: \"getTableWidthFromDom\",\n    value: function getTableWidthFromDom() {\n      var containerElement = this.tableContainerRef.current;\n\n      if (containerElement) {\n        return containerElement.offsetWidth;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getSelectedRows\",\n    value: function getSelectedRows(rows) {\n      var data = this.props.data;\n      return (0, _data.normalizeData)(data).filter(function (item, index) {\n        return rows[index].isSelected;\n      });\n    }\n  }, {\n    key: \"getMaxRowSelection\",\n    value: function getMaxRowSelection() {\n      var _this$props2 = this.props,\n          maxRowSelection = _this$props2.maxRowSelection,\n          data = _this$props2.data;\n      var rowsLength = (0, _data.normalizeData)(data).length;\n      var maxRowSelectionNumber = Number(maxRowSelection);\n\n      if (!(0, _selector.isValidMaxRowSelection)(maxRowSelection, rowsLength)) {\n        return rowsLength;\n      }\n\n      return maxRowSelectionNumber;\n    }\n    /**\n     * It will scroll to the top of the Y scrollable container.\n     * @public\n     */\n\n  }, {\n    key: \"scrollTop\",\n    value: function scrollTop() {\n      this.scrollableY.current.scrollTop = 0;\n    }\n  }, {\n    key: \"updateRows\",\n    value: function updateRows() {\n      var _this$props3 = this.props,\n          keyField = _this$props3.keyField,\n          selectedRows = _this$props3.selectedRows,\n          onRowSelection = _this$props3.onRowSelection,\n          data = _this$props3.data;\n      var maxRowSelection = this.getMaxRowSelection();\n      var newRows = (0, _rows.getRows)({\n        keyField: keyField,\n        rows: (0, _data.normalizeData)(data),\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.indexes = (0, _rows.getIndexes)(newRows);\n      var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;\n      var currentSelectedRows = this.getSelectedRows(newRows);\n      var isNotSameSelectedRowsWithNewData = selectedRowsKeysLength !== currentSelectedRows.length;\n\n      if (isNotSameSelectedRowsWithNewData) {\n        onRowSelection(currentSelectedRows);\n        this.selectedRowsKeys = (0, _selector.getSelectedRowKeys)(currentSelectedRows, keyField);\n      }\n\n      this.setState({\n        rows: (0, _selector.getRowsWithInitalSelectedRows)({\n          rows: newRows,\n          selectedRows: selectedRows,\n          maxRowSelection: maxRowSelection,\n          indexes: this.indexes,\n          selectedRowsKeys: this.selectedRowsKeys\n        }),\n        bulkSelection: (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        })\n      });\n    }\n  }, {\n    key: \"isScrollActive\",\n    value: function isScrollActive() {\n      if (this.scrollableY.current) {\n        var _this$scrollableY$cur = this.scrollableY.current,\n            clientHeight = _this$scrollableY$cur.clientHeight,\n            scrollHeight = _this$scrollableY$cur.scrollHeight;\n        return clientHeight < scrollHeight;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateColumnsAndTableWidth\",\n    value: function updateColumnsAndTableWidth(newColumns) {\n      var columns = this.state.columns;\n      var _this$props4 = this.props,\n          minColumnWidth = _this$props4.minColumnWidth,\n          maxColumnWidth = _this$props4.maxColumnWidth;\n      var domTableWidth = this.getTableWidthFromDom();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || Infinity;\n      var updatedColumns = (0, _resizer.getUpdatedColumns)({\n        columns: newColumns || columns,\n        domTableWidth: domTableWidth,\n        minColumnWidth: minColWidth,\n        maxColumnWidth: maxColWidth\n      });\n      this.setState({\n        columns: updatedColumns\n      });\n\n      if (this.hasFlexibleColumns()) {\n        this.setState({\n          tableWidth: (0, _resizer.getTableWidth)(updatedColumns)\n        });\n      }\n    }\n  }, {\n    key: \"handleSelectAllRows\",\n    value: function handleSelectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenSelectAll)({\n        rows: rows,\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleDeselectAllRows\",\n    value: function handleDeselectAllRows() {\n      var onRowSelection = this.props.onRowSelection;\n      var rows = this.state.rows;\n      this.selectedRowsKeys = {};\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselectAll)(rows);\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: this.getMaxRowSelection(),\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"handleSelectRow\",\n    value: function handleSelectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n\n      if (maxRowSelection > 1) {\n        var updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          indexes: indexes,\n          isMultiple: isMultiple,\n          rowKeyValue: rowKeyValue,\n          lastSelectedRowKey: this.lastSelectedRowKey,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        var bulkSelection = (0, _selector.getBulkSelectionState)({\n          maxRowSelection: maxRowSelection,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n        this.setState({\n          rows: updatedRows,\n          bulkSelection: bulkSelection\n        });\n        onRowSelection(this.getSelectedRows(updatedRows));\n      } else {\n        this.selectedRowsKeys = {};\n        this.selectedRowsKeys[rowKeyValue] = true;\n\n        var _updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({\n          maxRowSelection: maxRowSelection,\n          rows: rows,\n          rowKeyValue: rowKeyValue,\n          selectedRowsKeys: this.selectedRowsKeys\n        });\n\n        this.setState({\n          rows: _updatedRows\n        });\n        onRowSelection(this.getSelectedRows(_updatedRows));\n      }\n\n      this.lastSelectedRowKey = rowKeyValue;\n    }\n  }, {\n    key: \"handleDeselectRow\",\n    value: function handleDeselectRow(event, isMultiple, rowKeyValue) {\n      var onRowSelection = this.props.onRowSelection;\n      var indexes = this.indexes;\n      var rows = this.state.rows;\n      var maxRowSelection = this.getMaxRowSelection();\n      var updatedRows = (0, _selector.getUpdatedRowsWhenDeselect)({\n        maxRowSelection: maxRowSelection,\n        rows: rows,\n        indexes: indexes,\n        isMultiple: isMultiple,\n        rowKeyValue: rowKeyValue,\n        lastSelectedRowKey: this.lastSelectedRowKey,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      var bulkSelection = (0, _selector.getBulkSelectionState)({\n        maxRowSelection: maxRowSelection,\n        selectedRowsKeys: this.selectedRowsKeys\n      });\n      this.setState({\n        rows: updatedRows,\n        bulkSelection: bulkSelection\n      });\n      this.lastSelectedRowKey = rowKeyValue;\n      onRowSelection(this.getSelectedRows(updatedRows));\n    }\n  }, {\n    key: \"hasFlexibleColumns\",\n    value: function hasFlexibleColumns() {\n      var columns = this.state.columns;\n      return columns.some(function (column) {\n        return column.isResized !== true;\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(widthDelta, colIndex) {\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          tableWidth = _this$state.tableWidth;\n\n      if (widthDelta !== 0) {\n        this.setState({\n          columns: (0, _resizer.getResizedColumns)({\n            columns: columns,\n            colIndex: colIndex,\n            widthDelta: widthDelta\n          }),\n          tableWidth: tableWidth + widthDelta\n        });\n      }\n    }\n  }, {\n    key: \"handleSort\",\n    value: function handleSort(event, field, sortDirection) {\n      var _this$props5 = this.props,\n          onSort = _this$props5.onSort,\n          sortedBy = _this$props5.sortedBy;\n      var nextSortDirection = (0, _sort.getNextSortDirection)(field, sortedBy, sortDirection);\n      onSort(event, field, nextSortDirection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          id = _this$props6.id,\n          data = _this$props6.data,\n          sortedBy = _this$props6.sortedBy,\n          sortDirection = _this$props6.sortDirection,\n          defaultSortDirection = _this$props6.defaultSortDirection,\n          resizeColumnDisabled = _this$props6.resizeColumnDisabled,\n          rowNumberOffset = _this$props6.rowNumberOffset,\n          minColumnWidth = _this$props6.minColumnWidth,\n          maxColumnWidth = _this$props6.maxColumnWidth,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          isLoading = _this$props6.isLoading,\n          emptyIcon = _this$props6.emptyIcon,\n          emptyTitle = _this$props6.emptyTitle,\n          emptyDescription = _this$props6.emptyDescription,\n          keyField = _this$props6.keyField;\n      var _this$state2 = this.state,\n          columns = _this$state2.columns,\n          tableWidth = _this$state2.tableWidth,\n          rows = _this$state2.rows,\n          bulkSelection = _this$state2.bulkSelection;\n      var tableStyles = {\n        width: tableWidth\n      };\n      var maxRowSelection = this.getMaxRowSelection();\n      var minColWidth = Number(minColumnWidth) || 50;\n      var maxColWidth = Number(maxColumnWidth) || 5000;\n      var isEmpty = data.length === 0;\n\n      if (keyField && typeof keyField === 'string') {\n        return _react[\"default\"].createElement(_container[\"default\"], {\n          id: id,\n          className: className,\n          style: style\n        }, _react[\"default\"].createElement(\"div\", {\n          ref: this.resizeTarget\n        }), _react[\"default\"].createElement(_container[\"default\"], null, _react[\"default\"].createElement(_scrollableX[\"default\"], {\n          ref: this.tableContainerRef\n        }, _react[\"default\"].createElement(_scrollableY[\"default\"], {\n          isEmpty: isEmpty,\n          isLoading: isLoading,\n          ref: this.scrollableY,\n          style: tableStyles\n        }, _react[\"default\"].createElement(_table[\"default\"], {\n          style: tableStyles\n        }, _react[\"default\"].createElement(\"thead\", null, _react[\"default\"].createElement(\"tr\", null, _react[\"default\"].createElement(_head[\"default\"], {\n          columns: columns,\n          sortedBy: sortedBy,\n          sortDirection: sortDirection,\n          defaultSortDirection: defaultSortDirection,\n          resizeColumnDisabled: resizeColumnDisabled,\n          minColumnWidth: minColWidth,\n          maxColumnWidth: maxColWidth,\n          onSort: this.handleSort,\n          onResize: this.handleResize,\n          onSelectAllRows: this.handleSelectAllRows,\n          onDeselectAllRows: this.handleDeselectAllRows,\n          tableId: this.tableId,\n          maxRowSelection: maxRowSelection,\n          bulkSelection: bulkSelection,\n          hasScroll: this.isScrollActive()\n        }))), _react[\"default\"].createElement(_tableBody[\"default\"], {\n          rowNumberOffset: rowNumberOffset\n        }, _react[\"default\"].createElement(_body[\"default\"], {\n          data: (0, _data.normalizeData)(data),\n          columns: columns,\n          rows: rows,\n          tableId: this.tableId,\n          isLoading: isLoading,\n          emptyIcon: emptyIcon,\n          emptyTitle: emptyTitle,\n          emptyDescription: emptyDescription,\n          onSelectRow: this.handleSelectRow,\n          onDeselectRow: this.handleDeselectRow\n        })))))));\n      }\n\n      console.error('The \"keyField\" is a required prop of the Table component.');\n      return null;\n    }\n  }]);\n  return Table;\n}(_react.Component);\n\nexports[\"default\"] = Table;\nTable.propTypes = {\n  /** An array containing the objects(rows) to be displayed. */\n  data: _propTypes[\"default\"].arrayOf(Object),\n\n  /** The column fieldName that controls the sorting order.\n   * Sort the data using the onsort event handler. */\n  sortedBy: _propTypes[\"default\"].string,\n\n  /**\n   * Specifies the sorting direction, valid options are 'asc' or 'desc'.\n   */\n  sortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Specifies the default sorting direction on an unsorted column.\n   * Valid options include 'asc' and 'desc'.\n   * The default is 'asc' for sorting in ascending order. */\n  defaultSortDirection: _propTypes[\"default\"].oneOf(['asc', 'desc']),\n\n  /** Action triggered when a column is sorted.\n   * Receive the event object, field and sortDirection. */\n  onSort: _propTypes[\"default\"].func,\n\n  /** Specifies whether column resizing is disabled. The default is false. */\n  resizeColumnDisabled: _propTypes[\"default\"].bool,\n\n  /** The minimum width for all columns. The default value is 50px. */\n  minColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The maximum width for all columns. The default value is Infinity. */\n  maxColumnWidth: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** Show or hide the checkbox column for row selection. To show set\n   * showCheckboxColumn to true. The default value is false. */\n  showCheckboxColumn: _propTypes[\"default\"].bool,\n\n  /** Shows or hides the row number column. Set to true to show the row number column. The default is false. */\n  showRowNumberColumn: _propTypes[\"default\"].bool,\n\n  /** Determines where to start counting the row number. The default is 0. */\n  rowNumberOffset: _propTypes[\"default\"].number,\n\n  /** The action triggered when a row is selected. Receive the selectedRows array. */\n  onRowSelection: _propTypes[\"default\"].func,\n\n  /** The maximum number of rows that can be selected. When the value is\n   * 1 the selection is made by radio buttons, otherwise with checkboxes. */\n  maxRowSelection: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** An array with a list of keyField values of the selected rows. */\n  selectedRows: _propTypes[\"default\"].array,\n\n  /** It is required for associate each row with a unique ID. Must be one of the data key.\n   * If it is not passed the component will not render.\n   */\n  keyField: _propTypes[\"default\"].string.isRequired,\n\n  /** Specifies whether data is being loaded. The default is false. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** The icon that appears in the message of the Table when is empty.\n   * If not passed a fallback icon will be showed. */\n  emptyIcon: _propTypes[\"default\"].node,\n\n  /** The title that appears in the message of the Table when is empty.\n   *  If not passed a fallback title will be showed.\n   */\n  emptyTitle: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The description that appears in the message of the Table when is empty.\n   *  If not passed a fallback description will be showed.\n   */\n  emptyDescription: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nTable.defaultProps = {\n  data: [],\n  sortedBy: undefined,\n  sortDirection: undefined,\n  defaultSortDirection: 'asc',\n  onSort: function onSort() {},\n  resizeColumnDisabled: false,\n  minColumnWidth: 50,\n  maxColumnWidth: Infinity,\n  showCheckboxColumn: false,\n  showRowNumberColumn: false,\n  rowNumberOffset: 0,\n  onRowSelection: function onRowSelection() {},\n  maxRowSelection: undefined,\n  selectedRows: [],\n  isLoading: false,\n  emptyIcon: _react[\"default\"].createElement(_empty[\"default\"], null),\n  emptyTitle: 'Itâ€™s empty here',\n  emptyDescription: 'Our robots did not find any match...',\n  id: undefined,\n  className: undefined,\n  style: undefined,\n  children: undefined\n};"]},"metadata":{},"sourceType":"script"}