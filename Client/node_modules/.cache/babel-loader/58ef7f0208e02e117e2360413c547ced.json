{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Tree;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _treeChildren = _interopRequireDefault(require(\"./treeChildren\"));\n\nvar _treeContainerUl = _interopRequireDefault(require(\"./styled/treeContainerUl\"));\n\nvar _getNode = _interopRequireDefault(require(\"./helpers/getNode\"));\n/**\n * A Tree is visualization of a structure hierarchy with nested elements. A branch can be expanded or collapsed or selected. This is a BETA version.\n * @category Layout\n */\n\n\nfunction Tree(props) {\n  var data = props.data,\n      onExpandCollapse = props.onExpandCollapse,\n      onSelect = props.onSelect,\n      className = props.className,\n      style = props.style,\n      id = props.id;\n  return _react[\"default\"].createElement(_treeContainerUl[\"default\"], {\n    className: className,\n    style: style,\n    id: id\n  }, _react[\"default\"].createElement(_treeChildren[\"default\"], {\n    data: data,\n    onExpandCollapse: onExpandCollapse,\n    onSelect: onSelect,\n    nodePath: []\n  }));\n}\n\nTree.propTypes = {\n  /** A array with the nodes of the Tree. This is a recursive shape that is used for render the nested nodes passed on children of the array.\n   */\n  data: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].node,\n    icon: _propTypes[\"default\"].node,\n    isExpanded: _propTypes[\"default\"].bool,\n    isLoading: _propTypes[\"default\"].bool,\n    isChecked: _propTypes[\"default\"].oneOf([true, false, 'indeterminate']),\n    children: _propTypes[\"default\"].array\n  })),\n\n  /** The action triggered when the user clicks in the tree node expand or collapse button. */\n  onExpandCollapse: _propTypes[\"default\"].func,\n\n  /** The action triggered when the user clicks in the tree node checkbox. */\n  onSelect: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nTree.defaultProps = {\n  data: [],\n  onExpandCollapse: function onExpandCollapse() {},\n  onSelect: function onSelect() {},\n  className: undefined,\n  style: undefined,\n  id: undefined\n};\n/**\n * Add documentation.\n * @public\n */\n\nTree.getNode = _getNode[\"default\"];","map":{"version":3,"sources":["/home/sharad_bagmar/Nutanix/aws_go/node_modules/react-rainbow-components/components/Tree/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","Tree","_react","_propTypes","_treeChildren","_treeContainerUl","_getNode","props","data","onExpandCollapse","onSelect","className","style","id","createElement","nodePath","propTypes","arrayOf","shape","label","node","icon","isExpanded","bool","isLoading","isChecked","oneOf","children","array","func","string","object","defaultProps","undefined","getNode"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Tree;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _treeChildren = _interopRequireDefault(require(\"./treeChildren\"));\n\nvar _treeContainerUl = _interopRequireDefault(require(\"./styled/treeContainerUl\"));\n\nvar _getNode = _interopRequireDefault(require(\"./helpers/getNode\"));\n\n/**\n * A Tree is visualization of a structure hierarchy with nested elements. A branch can be expanded or collapsed or selected. This is a BETA version.\n * @category Layout\n */\nfunction Tree(props) {\n  var data = props.data,\n      onExpandCollapse = props.onExpandCollapse,\n      onSelect = props.onSelect,\n      className = props.className,\n      style = props.style,\n      id = props.id;\n  return _react[\"default\"].createElement(_treeContainerUl[\"default\"], {\n    className: className,\n    style: style,\n    id: id\n  }, _react[\"default\"].createElement(_treeChildren[\"default\"], {\n    data: data,\n    onExpandCollapse: onExpandCollapse,\n    onSelect: onSelect,\n    nodePath: []\n  }));\n}\n\nTree.propTypes = {\n  /** A array with the nodes of the Tree. This is a recursive shape that is used for render the nested nodes passed on children of the array.\n   */\n  data: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].node,\n    icon: _propTypes[\"default\"].node,\n    isExpanded: _propTypes[\"default\"].bool,\n    isLoading: _propTypes[\"default\"].bool,\n    isChecked: _propTypes[\"default\"].oneOf([true, false, 'indeterminate']),\n    children: _propTypes[\"default\"].array\n  })),\n\n  /** The action triggered when the user clicks in the tree node expand or collapse button. */\n  onExpandCollapse: _propTypes[\"default\"].func,\n\n  /** The action triggered when the user clicks in the tree node checkbox. */\n  onSelect: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nTree.defaultProps = {\n  data: [],\n  onExpandCollapse: function onExpandCollapse() {},\n  onSelect: function onSelect() {},\n  className: undefined,\n  style: undefined,\n  id: undefined\n};\n/**\n * Add documentation.\n * @public\n */\n\nTree.getNode = _getNode[\"default\"];"]},"metadata":{},"sourceType":"script"}